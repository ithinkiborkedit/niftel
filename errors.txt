ScanToken start 0: current 0: char 'p'
Unhandled char: 'p'
[identifier] start=0 current=1
[identifier] start=0 current=2
[identifier] start=0 current=3
[identifier] start=0 current=4
[identifier] start=0 current=5
[identifier] start=0 current=6
[identifier] start=0 current=7
ScanToken start 7: current 7: char ' '
ScanToken start 7: current 8: char 'm'
Unhandled char: 'm'
[identifier] start=7 current=9
[identifier] start=7 current=10
[identifier] start=7 current=11
[identifier] start=7 current=12
ScanToken start 12: current 12: char '\n'
ScanToken start 12: current 13: char '\n'
ScanToken start 12: current 14: char 'i'
Unhandled char: 'i'
[identifier] start=12 current=15
[identifier] start=12 current=16
[identifier] start=12 current=17
[identifier] start=12 current=18
[identifier] start=12 current=19
[identifier] start=12 current=20
ScanToken start 20: current 20: char ' '
ScanToken start 20: current 21: char '('
ScanToken start 22: current 22: char '\n'
ScanToken start 22: current 23: char '\t'
ScanToken start 22: current 24: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:"\n\t\"fmt\"", Literal:"\t\"fmt", Line:4}
ScanToken start 29: current 29: char '\n'
ScanToken start 29: current 30: char '\t'
ScanToken start 29: current 31: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:"\n\t\"log\"", Literal:"\t\"log", Line:5}
ScanToken start 36: current 36: char '\n'
ScanToken start 36: current 37: char '\t'
ScanToken start 36: current 38: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:"\n\t\"os\"", Literal:"\t\"os", Line:6}
ScanToken start 42: current 42: char '\n'
ScanToken start 42: current 43: char ')'
ScanToken start 44: current 44: char '\n'
ScanToken start 44: current 45: char '\n'
ScanToken start 44: current 46: char 't'
Unhandled char: 't'
[identifier] start=44 current=47
[identifier] start=44 current=48
[identifier] start=44 current=49
[identifier] start=44 current=50
ScanToken start 50: current 50: char ' '
ScanToken start 50: current 51: char 'T'
Unhandled char: 'T'
[identifier] start=50 current=52
[identifier] start=50 current=53
[identifier] start=50 current=54
[identifier] start=50 current=55
[identifier] start=50 current=56
[identifier] start=50 current=57
[identifier] start=50 current=58
[identifier] start=50 current=59
[identifier] start=50 current=60
ScanToken start 60: current 60: char ' '
ScanToken start 60: current 61: char 's'
Unhandled char: 's'
[identifier] start=60 current=62
[identifier] start=60 current=63
[identifier] start=60 current=64
[identifier] start=60 current=65
[identifier] start=60 current=66
[identifier] start=60 current=67
ScanToken start 67: current 67: char '\n'
ScanToken start 67: current 68: char '\n'
ScanToken start 67: current 69: char 'c'
Unhandled char: 'c'
[identifier] start=67 current=70
[identifier] start=67 current=71
[identifier] start=67 current=72
[identifier] start=67 current=73
[identifier] start=67 current=74
ScanToken start 74: current 74: char ' '
ScanToken start 74: current 75: char '('
ScanToken start 76: current 76: char '\n'
ScanToken start 76: current 77: char '\t'
ScanToken start 76: current 78: char 'T'
Unhandled char: 'T'
[identifier] start=76 current=79
[identifier] start=76 current=80
[identifier] start=76 current=81
[identifier] start=76 current=82
[identifier] start=76 current=83
[identifier] start=76 current=84
[identifier] start=76 current=85
[identifier] start=76 current=86
ScanToken start 86: current 86: char ' '
ScanToken start 86: current 87: char ' '
ScanToken start 86: current 88: char ' '
ScanToken start 86: current 89: char ' '
ScanToken start 86: current 90: char ' '
ScanToken start 86: current 91: char ' '
ScanToken start 86: current 92: char ' '
ScanToken start 86: current 93: char 'T'
Unhandled char: 'T'
[identifier] start=86 current=94
[identifier] start=86 current=95
[identifier] start=86 current=96
[identifier] start=86 current=97
[identifier] start=86 current=98
[identifier] start=86 current=99
[identifier] start=86 current=100
[identifier] start=86 current=101
[identifier] start=86 current=102
ScanToken start 102: current 102: char ' '
ScanToken start 102: current 103: char '='
ScanToken start 104: current 104: char ' '
ScanToken start 104: current 105: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:" \"EOF\"", Literal:"\"EOF", Line:12}
ScanToken start 110: current 110: char '\n'
ScanToken start 110: current 111: char '\t'
ScanToken start 110: current 112: char 'T'
Unhandled char: 'T'
[identifier] start=110 current=113
[identifier] start=110 current=114
[identifier] start=110 current=115
[identifier] start=110 current=116
[identifier] start=110 current=117
[identifier] start=110 current=118
[identifier] start=110 current=119
[identifier] start=110 current=120
[identifier] start=110 current=121
[identifier] start=110 current=122
ScanToken start 122: current 122: char ' '
ScanToken start 122: current 123: char ' '
ScanToken start 122: current 124: char ' '
ScanToken start 122: current 125: char ' '
ScanToken start 122: current 126: char ' '
ScanToken start 122: current 127: char 'T'
Unhandled char: 'T'
[identifier] start=122 current=128
[identifier] start=122 current=129
[identifier] start=122 current=130
[identifier] start=122 current=131
[identifier] start=122 current=132
[identifier] start=122 current=133
[identifier] start=122 current=134
[identifier] start=122 current=135
[identifier] start=122 current=136
ScanToken start 136: current 136: char ' '
ScanToken start 136: current 137: char '='
ScanToken start 138: current 138: char ' '
ScanToken start 138: current 139: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:" \"IDENT\"", Literal:"\"IDENT", Line:13}
ScanToken start 146: current 146: char '\n'
ScanToken start 146: current 147: char '\t'
ScanToken start 146: current 148: char 'T'
Unhandled char: 'T'
[identifier] start=146 current=149
[identifier] start=146 current=150
[identifier] start=146 current=151
[identifier] start=146 current=152
[identifier] start=146 current=153
[identifier] start=146 current=154
[identifier] start=146 current=155
[identifier] start=146 current=156
[identifier] start=146 current=157
[identifier] start=146 current=158
[identifier] start=146 current=159
ScanToken start 159: current 159: char ' '
ScanToken start 159: current 160: char ' '
ScanToken start 159: current 161: char ' '
ScanToken start 159: current 162: char ' '
ScanToken start 159: current 163: char 'T'
Unhandled char: 'T'
[identifier] start=159 current=164
[identifier] start=159 current=165
[identifier] start=159 current=166
[identifier] start=159 current=167
[identifier] start=159 current=168
[identifier] start=159 current=169
[identifier] start=159 current=170
[identifier] start=159 current=171
[identifier] start=159 current=172
ScanToken start 172: current 172: char ' '
ScanToken start 172: current 173: char '='
ScanToken start 174: current 174: char ' '
ScanToken start 174: current 175: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:" \"NUMBER\"", Literal:"\"NUMBER", Line:14}
ScanToken start 183: current 183: char '\n'
ScanToken start 183: current 184: char '\t'
ScanToken start 183: current 185: char 'T'
Unhandled char: 'T'
[identifier] start=183 current=186
[identifier] start=183 current=187
[identifier] start=183 current=188
[identifier] start=183 current=189
[identifier] start=183 current=190
[identifier] start=183 current=191
[identifier] start=183 current=192
[identifier] start=183 current=193
[identifier] start=183 current=194
[identifier] start=183 current=195
[identifier] start=183 current=196
ScanToken start 196: current 196: char ' '
ScanToken start 196: current 197: char ' '
ScanToken start 196: current 198: char ' '
ScanToken start 196: current 199: char ' '
ScanToken start 196: current 200: char 'T'
Unhandled char: 'T'
[identifier] start=196 current=201
[identifier] start=196 current=202
[identifier] start=196 current=203
[identifier] start=196 current=204
[identifier] start=196 current=205
[identifier] start=196 current=206
[identifier] start=196 current=207
[identifier] start=196 current=208
[identifier] start=196 current=209
ScanToken start 209: current 209: char ' '
ScanToken start 209: current 210: char '='
ScanToken start 211: current 211: char ' '
ScanToken start 211: current 212: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:" \"STRING\"", Literal:"\"STRING", Line:15}
ScanToken start 220: current 220: char '\n'
ScanToken start 220: current 221: char '\t'
ScanToken start 220: current 222: char 'T'
Unhandled char: 'T'
[identifier] start=220 current=223
[identifier] start=220 current=224
[identifier] start=220 current=225
[identifier] start=220 current=226
[identifier] start=220 current=227
[identifier] start=220 current=228
[identifier] start=220 current=229
[identifier] start=220 current=230
[identifier] start=220 current=231
ScanToken start 231: current 231: char ' '
ScanToken start 231: current 232: char ' '
ScanToken start 231: current 233: char ' '
ScanToken start 231: current 234: char ' '
ScanToken start 231: current 235: char ' '
ScanToken start 231: current 236: char ' '
ScanToken start 231: current 237: char 'T'
Unhandled char: 'T'
[identifier] start=231 current=238
[identifier] start=231 current=239
[identifier] start=231 current=240
[identifier] start=231 current=241
[identifier] start=231 current=242
[identifier] start=231 current=243
[identifier] start=231 current=244
[identifier] start=231 current=245
[identifier] start=231 current=246
ScanToken start 246: current 246: char ' '
ScanToken start 246: current 247: char '='
ScanToken start 248: current 248: char ' '
ScanToken start 248: current 249: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:" \"TRUE\"", Literal:"\"TRUE", Line:16}
ScanToken start 255: current 255: char '\n'
ScanToken start 255: current 256: char '\t'
ScanToken start 255: current 257: char 'T'
Unhandled char: 'T'
[identifier] start=255 current=258
[identifier] start=255 current=259
[identifier] start=255 current=260
[identifier] start=255 current=261
[identifier] start=255 current=262
[identifier] start=255 current=263
[identifier] start=255 current=264
[identifier] start=255 current=265
ScanToken start 265: current 265: char ' '
ScanToken start 265: current 266: char ' '
ScanToken start 265: current 267: char ' '
ScanToken start 265: current 268: char ' '
ScanToken start 265: current 269: char ' '
ScanToken start 265: current 270: char ' '
ScanToken start 265: current 271: char ' '
ScanToken start 265: current 272: char 'T'
Unhandled char: 'T'
[identifier] start=265 current=273
[identifier] start=265 current=274
[identifier] start=265 current=275
[identifier] start=265 current=276
[identifier] start=265 current=277
[identifier] start=265 current=278
[identifier] start=265 current=279
[identifier] start=265 current=280
[identifier] start=265 current=281
ScanToken start 281: current 281: char ' '
ScanToken start 281: current 282: char '='
ScanToken start 283: current 283: char ' '
ScanToken start 283: current 284: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:" \"NIL\"", Literal:"\"NIL", Line:17}
ScanToken start 289: current 289: char '\n'
ScanToken start 289: current 290: char '\t'
ScanToken start 289: current 291: char 'T'
Unhandled char: 'T'
[identifier] start=289 current=292
[identifier] start=289 current=293
[identifier] start=289 current=294
[identifier] start=289 current=295
[identifier] start=289 current=296
[identifier] start=289 current=297
[identifier] start=289 current=298
[identifier] start=289 current=299
[identifier] start=289 current=300
[identifier] start=289 current=301
ScanToken start 301: current 301: char ' '
ScanToken start 301: current 302: char ' '
ScanToken start 301: current 303: char ' '
ScanToken start 301: current 304: char ' '
ScanToken start 301: current 305: char ' '
ScanToken start 301: current 306: char 'T'
Unhandled char: 'T'
[identifier] start=301 current=307
[identifier] start=301 current=308
[identifier] start=301 current=309
[identifier] start=301 current=310
[identifier] start=301 current=311
[identifier] start=301 current=312
[identifier] start=301 current=313
[identifier] start=301 current=314
[identifier] start=301 current=315
ScanToken start 315: current 315: char ' '
ScanToken start 315: current 316: char '='
ScanToken start 317: current 317: char ' '
ScanToken start 317: current 318: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:" \"FALSE\"", Literal:"\"FALSE", Line:18}
ScanToken start 325: current 325: char '\n'
ScanToken start 325: current 326: char '\t'
ScanToken start 325: current 327: char 'T'
Unhandled char: 'T'
[identifier] start=325 current=328
[identifier] start=325 current=329
[identifier] start=325 current=330
[identifier] start=325 current=331
[identifier] start=325 current=332
[identifier] start=325 current=333
[identifier] start=325 current=334
[identifier] start=325 current=335
[identifier] start=325 current=336
ScanToken start 336: current 336: char ' '
ScanToken start 336: current 337: char ' '
ScanToken start 336: current 338: char ' '
ScanToken start 336: current 339: char ' '
ScanToken start 336: current 340: char ' '
ScanToken start 336: current 341: char ' '
ScanToken start 336: current 342: char 'T'
Unhandled char: 'T'
[identifier] start=336 current=343
[identifier] start=336 current=344
[identifier] start=336 current=345
[identifier] start=336 current=346
[identifier] start=336 current=347
[identifier] start=336 current=348
[identifier] start=336 current=349
[identifier] start=336 current=350
[identifier] start=336 current=351
ScanToken start 351: current 351: char ' '
ScanToken start 351: current 352: char '='
ScanToken start 353: current 353: char ' '
ScanToken start 353: current 354: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:" \"EQUAL\"", Literal:"\"EQUAL", Line:19}
ScanToken start 361: current 361: char '\n'
ScanToken start 361: current 362: char '\t'
ScanToken start 361: current 363: char 'T'
Unhandled char: 'T'
[identifier] start=361 current=364
[identifier] start=361 current=365
[identifier] start=361 current=366
[identifier] start=361 current=367
[identifier] start=361 current=368
[identifier] start=361 current=369
[identifier] start=361 current=370
[identifier] start=361 current=371
[identifier] start=361 current=372
ScanToken start 372: current 372: char ' '
ScanToken start 372: current 373: char ' '
ScanToken start 372: current 374: char ' '
ScanToken start 372: current 375: char ' '
ScanToken start 372: current 376: char ' '
ScanToken start 372: current 377: char ' '
ScanToken start 372: current 378: char 'T'
Unhandled char: 'T'
[identifier] start=372 current=379
[identifier] start=372 current=380
[identifier] start=372 current=381
[identifier] start=372 current=382
[identifier] start=372 current=383
[identifier] start=372 current=384
[identifier] start=372 current=385
[identifier] start=372 current=386
[identifier] start=372 current=387
ScanToken start 387: current 387: char ' '
ScanToken start 387: current 388: char '='
ScanToken start 389: current 389: char ' '
ScanToken start 389: current 390: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:" \"BANG\"", Literal:"\"BANG", Line:20}
ScanToken start 396: current 396: char '\n'
ScanToken start 396: current 397: char '\t'
ScanToken start 396: current 398: char 'T'
Unhandled char: 'T'
[identifier] start=396 current=399
[identifier] start=396 current=400
[identifier] start=396 current=401
[identifier] start=396 current=402
[identifier] start=396 current=403
[identifier] start=396 current=404
[identifier] start=396 current=405
[identifier] start=396 current=406
[identifier] start=396 current=407
ScanToken start 407: current 407: char ' '
ScanToken start 407: current 408: char ' '
ScanToken start 407: current 409: char ' '
ScanToken start 407: current 410: char ' '
ScanToken start 407: current 411: char ' '
ScanToken start 407: current 412: char ' '
ScanToken start 407: current 413: char 'T'
Unhandled char: 'T'
[identifier] start=407 current=414
[identifier] start=407 current=415
[identifier] start=407 current=416
[identifier] start=407 current=417
[identifier] start=407 current=418
[identifier] start=407 current=419
[identifier] start=407 current=420
[identifier] start=407 current=421
[identifier] start=407 current=422
ScanToken start 422: current 422: char ' '
ScanToken start 422: current 423: char '='
ScanToken start 424: current 424: char ' '
ScanToken start 424: current 425: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:" \"STAR\"", Literal:"\"STAR", Line:21}
ScanToken start 431: current 431: char '\n'
ScanToken start 431: current 432: char '\t'
ScanToken start 431: current 433: char 'T'
Unhandled char: 'T'
[identifier] start=431 current=434
[identifier] start=431 current=435
[identifier] start=431 current=436
[identifier] start=431 current=437
[identifier] start=431 current=438
[identifier] start=431 current=439
[identifier] start=431 current=440
[identifier] start=431 current=441
[identifier] start=431 current=442
[identifier] start=431 current=443
[identifier] start=431 current=444
[identifier] start=431 current=445
[identifier] start=431 current=446
ScanToken start 446: current 446: char ' '
ScanToken start 446: current 447: char ' '
ScanToken start 446: current 448: char 'T'
Unhandled char: 'T'
[identifier] start=446 current=449
[identifier] start=446 current=450
[identifier] start=446 current=451
[identifier] start=446 current=452
[identifier] start=446 current=453
[identifier] start=446 current=454
[identifier] start=446 current=455
[identifier] start=446 current=456
[identifier] start=446 current=457
ScanToken start 457: current 457: char ' '
ScanToken start 457: current 458: char '='
ScanToken start 459: current 459: char ' '
ScanToken start 459: current 460: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:" \"FWD_SLASH\"", Literal:"\"FWD_SLASH", Line:22}
ScanToken start 471: current 471: char '\n'
ScanToken start 471: current 472: char '\t'
ScanToken start 471: current 473: char 'T'
Unhandled char: 'T'
[identifier] start=471 current=474
[identifier] start=471 current=475
[identifier] start=471 current=476
[identifier] start=471 current=477
[identifier] start=471 current=478
[identifier] start=471 current=479
[identifier] start=471 current=480
[identifier] start=471 current=481
[identifier] start=471 current=482
ScanToken start 482: current 482: char ' '
ScanToken start 482: current 483: char ' '
ScanToken start 482: current 484: char ' '
ScanToken start 482: current 485: char ' '
ScanToken start 482: current 486: char ' '
ScanToken start 482: current 487: char ' '
ScanToken start 482: current 488: char 'T'
Unhandled char: 'T'
[identifier] start=482 current=489
[identifier] start=482 current=490
[identifier] start=482 current=491
[identifier] start=482 current=492
[identifier] start=482 current=493
[identifier] start=482 current=494
[identifier] start=482 current=495
[identifier] start=482 current=496
[identifier] start=482 current=497
ScanToken start 497: current 497: char ' '
ScanToken start 497: current 498: char '='
ScanToken start 499: current 499: char ' '
ScanToken start 499: current 500: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:" \"PLUS\"", Literal:"\"PLUS", Line:23}
ScanToken start 506: current 506: char '\n'
ScanToken start 506: current 507: char '\t'
ScanToken start 506: current 508: char 'T'
Unhandled char: 'T'
[identifier] start=506 current=509
[identifier] start=506 current=510
[identifier] start=506 current=511
[identifier] start=506 current=512
[identifier] start=506 current=513
[identifier] start=506 current=514
[identifier] start=506 current=515
[identifier] start=506 current=516
[identifier] start=506 current=517
[identifier] start=506 current=518
ScanToken start 518: current 518: char ' '
ScanToken start 518: current 519: char ' '
ScanToken start 518: current 520: char ' '
ScanToken start 518: current 521: char ' '
ScanToken start 518: current 522: char ' '
ScanToken start 518: current 523: char 'T'
Unhandled char: 'T'
[identifier] start=518 current=524
[identifier] start=518 current=525
[identifier] start=518 current=526
[identifier] start=518 current=527
[identifier] start=518 current=528
[identifier] start=518 current=529
[identifier] start=518 current=530
[identifier] start=518 current=531
[identifier] start=518 current=532
ScanToken start 532: current 532: char ' '
ScanToken start 532: current 533: char '='
ScanToken start 534: current 534: char ' '
ScanToken start 534: current 535: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:" \"MINUS\"", Literal:"\"MINUS", Line:24}
ScanToken start 542: current 542: char '\n'
ScanToken start 542: current 543: char '\t'
ScanToken start 542: current 544: char 'T'
Unhandled char: 'T'
[identifier] start=542 current=545
[identifier] start=542 current=546
[identifier] start=542 current=547
[identifier] start=542 current=548
[identifier] start=542 current=549
[identifier] start=542 current=550
[identifier] start=542 current=551
[identifier] start=542 current=552
[identifier] start=542 current=553
[identifier] start=542 current=554
[identifier] start=542 current=555
ScanToken start 555: current 555: char ' '
ScanToken start 555: current 556: char ' '
ScanToken start 555: current 557: char ' '
ScanToken start 555: current 558: char ' '
ScanToken start 555: current 559: char 'T'
Unhandled char: 'T'
[identifier] start=555 current=560
[identifier] start=555 current=561
[identifier] start=555 current=562
[identifier] start=555 current=563
[identifier] start=555 current=564
[identifier] start=555 current=565
[identifier] start=555 current=566
[identifier] start=555 current=567
[identifier] start=555 current=568
ScanToken start 568: current 568: char ' '
ScanToken start 568: current 569: char '='
ScanToken start 570: current 570: char ' '
ScanToken start 570: current 571: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:" \"LPAREN\"", Literal:"\"LPAREN", Line:25}
ScanToken start 579: current 579: char '\n'
ScanToken start 579: current 580: char '\t'
ScanToken start 579: current 581: char 'T'
Unhandled char: 'T'
[identifier] start=579 current=582
[identifier] start=579 current=583
[identifier] start=579 current=584
[identifier] start=579 current=585
[identifier] start=579 current=586
[identifier] start=579 current=587
[identifier] start=579 current=588
[identifier] start=579 current=589
[identifier] start=579 current=590
[identifier] start=579 current=591
[identifier] start=579 current=592
ScanToken start 592: current 592: char ' '
ScanToken start 592: current 593: char ' '
ScanToken start 592: current 594: char ' '
ScanToken start 592: current 595: char ' '
ScanToken start 592: current 596: char 'T'
Unhandled char: 'T'
[identifier] start=592 current=597
[identifier] start=592 current=598
[identifier] start=592 current=599
[identifier] start=592 current=600
[identifier] start=592 current=601
[identifier] start=592 current=602
[identifier] start=592 current=603
[identifier] start=592 current=604
[identifier] start=592 current=605
ScanToken start 605: current 605: char ' '
ScanToken start 605: current 606: char '='
ScanToken start 607: current 607: char ' '
ScanToken start 607: current 608: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:" \"RPAREN\"", Literal:"\"RPAREN", Line:26}
ScanToken start 616: current 616: char '\n'
ScanToken start 616: current 617: char '\t'
ScanToken start 616: current 618: char 'T'
Unhandled char: 'T'
[identifier] start=616 current=619
[identifier] start=616 current=620
[identifier] start=616 current=621
[identifier] start=616 current=622
[identifier] start=616 current=623
[identifier] start=616 current=624
[identifier] start=616 current=625
ScanToken start 625: current 625: char ' '
ScanToken start 625: current 626: char ' '
ScanToken start 625: current 627: char ' '
ScanToken start 625: current 628: char ' '
ScanToken start 625: current 629: char ' '
ScanToken start 625: current 630: char ' '
ScanToken start 625: current 631: char ' '
ScanToken start 625: current 632: char ' '
ScanToken start 625: current 633: char 'T'
Unhandled char: 'T'
[identifier] start=625 current=634
[identifier] start=625 current=635
[identifier] start=625 current=636
[identifier] start=625 current=637
[identifier] start=625 current=638
[identifier] start=625 current=639
[identifier] start=625 current=640
[identifier] start=625 current=641
[identifier] start=625 current=642
ScanToken start 642: current 642: char ' '
ScanToken start 642: current 643: char '='
ScanToken start 644: current 644: char ' '
ScanToken start 644: current 645: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:" \"KEYWORD\"", Literal:"\"KEYWORD", Line:27}
ScanToken start 654: current 654: char '\n'
ScanToken start 654: current 655: char '\t'
ScanToken start 654: current 656: char 'T'
Unhandled char: 'T'
[identifier] start=654 current=657
[identifier] start=654 current=658
[identifier] start=654 current=659
[identifier] start=654 current=660
[identifier] start=654 current=661
[identifier] start=654 current=662
[identifier] start=654 current=663
[identifier] start=654 current=664
ScanToken start 664: current 664: char ' '
ScanToken start 664: current 665: char ' '
ScanToken start 664: current 666: char ' '
ScanToken start 664: current 667: char ' '
ScanToken start 664: current 668: char ' '
ScanToken start 664: current 669: char ' '
ScanToken start 664: current 670: char ' '
ScanToken start 664: current 671: char 'T'
Unhandled char: 'T'
[identifier] start=664 current=672
[identifier] start=664 current=673
[identifier] start=664 current=674
[identifier] start=664 current=675
[identifier] start=664 current=676
[identifier] start=664 current=677
[identifier] start=664 current=678
[identifier] start=664 current=679
[identifier] start=664 current=680
ScanToken start 680: current 680: char ' '
ScanToken start 680: current 681: char '='
ScanToken start 682: current 682: char ' '
ScanToken start 682: current 683: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:" \"KEYWORD\"", Literal:"\"KEYWORD", Line:28}
ScanToken start 692: current 692: char '\n'
ScanToken start 692: current 693: char '\t'
ScanToken start 692: current 694: char 'T'
Unhandled char: 'T'
[identifier] start=692 current=695
[identifier] start=692 current=696
[identifier] start=692 current=697
[identifier] start=692 current=698
[identifier] start=692 current=699
[identifier] start=692 current=700
[identifier] start=692 current=701
[identifier] start=692 current=702
ScanToken start 702: current 702: char ' '
ScanToken start 702: current 703: char ' '
ScanToken start 702: current 704: char ' '
ScanToken start 702: current 705: char ' '
ScanToken start 702: current 706: char ' '
ScanToken start 702: current 707: char ' '
ScanToken start 702: current 708: char ' '
ScanToken start 702: current 709: char 'T'
Unhandled char: 'T'
[identifier] start=702 current=710
[identifier] start=702 current=711
[identifier] start=702 current=712
[identifier] start=702 current=713
[identifier] start=702 current=714
[identifier] start=702 current=715
[identifier] start=702 current=716
[identifier] start=702 current=717
[identifier] start=702 current=718
ScanToken start 718: current 718: char ' '
ScanToken start 718: current 719: char '='
ScanToken start 720: current 720: char ' '
ScanToken start 720: current 721: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:" \"KEYWORD\"", Literal:"\"KEYWORD", Line:29}
ScanToken start 730: current 730: char '\n'
ScanToken start 730: current 731: char '\t'
ScanToken start 730: current 732: char 'T'
Unhandled char: 'T'
[identifier] start=730 current=733
[identifier] start=730 current=734
[identifier] start=730 current=735
[identifier] start=730 current=736
[identifier] start=730 current=737
[identifier] start=730 current=738
[identifier] start=730 current=739
[identifier] start=730 current=740
[identifier] start=730 current=741
[identifier] start=730 current=742
[identifier] start=730 current=743
ScanToken start 743: current 743: char ' '
ScanToken start 743: current 744: char ' '
ScanToken start 743: current 745: char ' '
ScanToken start 743: current 746: char ' '
ScanToken start 743: current 747: char 'T'
Unhandled char: 'T'
[identifier] start=743 current=748
[identifier] start=743 current=749
[identifier] start=743 current=750
[identifier] start=743 current=751
[identifier] start=743 current=752
[identifier] start=743 current=753
[identifier] start=743 current=754
[identifier] start=743 current=755
[identifier] start=743 current=756
ScanToken start 756: current 756: char ' '
ScanToken start 756: current 757: char '='
ScanToken start 758: current 758: char ' '
ScanToken start 758: current 759: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:" \"LBRACE\"", Literal:"\"LBRACE", Line:30}
ScanToken start 767: current 767: char '\n'
ScanToken start 767: current 768: char '\t'
ScanToken start 767: current 769: char 'T'
Unhandled char: 'T'
[identifier] start=767 current=770
[identifier] start=767 current=771
[identifier] start=767 current=772
[identifier] start=767 current=773
[identifier] start=767 current=774
[identifier] start=767 current=775
[identifier] start=767 current=776
[identifier] start=767 current=777
[identifier] start=767 current=778
[identifier] start=767 current=779
[identifier] start=767 current=780
ScanToken start 780: current 780: char ' '
ScanToken start 780: current 781: char ' '
ScanToken start 780: current 782: char ' '
ScanToken start 780: current 783: char ' '
ScanToken start 780: current 784: char 'T'
Unhandled char: 'T'
[identifier] start=780 current=785
[identifier] start=780 current=786
[identifier] start=780 current=787
[identifier] start=780 current=788
[identifier] start=780 current=789
[identifier] start=780 current=790
[identifier] start=780 current=791
[identifier] start=780 current=792
[identifier] start=780 current=793
ScanToken start 793: current 793: char ' '
ScanToken start 793: current 794: char '='
ScanToken start 795: current 795: char ' '
ScanToken start 795: current 796: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:" \"RBRACE\"", Literal:"\"RBRACE", Line:31}
ScanToken start 804: current 804: char '\n'
ScanToken start 804: current 805: char '\t'
ScanToken start 804: current 806: char 'T'
Unhandled char: 'T'
[identifier] start=804 current=807
[identifier] start=804 current=808
[identifier] start=804 current=809
[identifier] start=804 current=810
[identifier] start=804 current=811
[identifier] start=804 current=812
[identifier] start=804 current=813
[identifier] start=804 current=814
[identifier] start=804 current=815
[identifier] start=804 current=816
[identifier] start=804 current=817
[identifier] start=804 current=818
[identifier] start=804 current=819
ScanToken start 819: current 819: char ' '
ScanToken start 819: current 820: char ' '
ScanToken start 819: current 821: char 'T'
Unhandled char: 'T'
[identifier] start=819 current=822
[identifier] start=819 current=823
[identifier] start=819 current=824
[identifier] start=819 current=825
[identifier] start=819 current=826
[identifier] start=819 current=827
[identifier] start=819 current=828
[identifier] start=819 current=829
[identifier] start=819 current=830
ScanToken start 830: current 830: char ' '
ScanToken start 830: current 831: char '='
ScanToken start 832: current 832: char ' '
ScanToken start 832: current 833: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:" \"LBRACKET\"", Literal:"\"LBRACKET", Line:32}
ScanToken start 843: current 843: char '\n'
ScanToken start 843: current 844: char '\t'
ScanToken start 843: current 845: char 'T'
Unhandled char: 'T'
[identifier] start=843 current=846
[identifier] start=843 current=847
[identifier] start=843 current=848
[identifier] start=843 current=849
[identifier] start=843 current=850
[identifier] start=843 current=851
[identifier] start=843 current=852
[identifier] start=843 current=853
[identifier] start=843 current=854
[identifier] start=843 current=855
[identifier] start=843 current=856
[identifier] start=843 current=857
[identifier] start=843 current=858
ScanToken start 858: current 858: char ' '
ScanToken start 858: current 859: char ' '
ScanToken start 858: current 860: char 'T'
Unhandled char: 'T'
[identifier] start=858 current=861
[identifier] start=858 current=862
[identifier] start=858 current=863
[identifier] start=858 current=864
[identifier] start=858 current=865
[identifier] start=858 current=866
[identifier] start=858 current=867
[identifier] start=858 current=868
[identifier] start=858 current=869
ScanToken start 869: current 869: char ' '
ScanToken start 869: current 870: char '='
ScanToken start 871: current 871: char ' '
ScanToken start 871: current 872: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:" \"RBRACKET\"", Literal:"\"RBRACKET", Line:33}
ScanToken start 882: current 882: char '\n'
ScanToken start 882: current 883: char '\t'
ScanToken start 882: current 884: char 'T'
Unhandled char: 'T'
[identifier] start=882 current=885
[identifier] start=882 current=886
[identifier] start=882 current=887
[identifier] start=882 current=888
[identifier] start=882 current=889
[identifier] start=882 current=890
[identifier] start=882 current=891
[identifier] start=882 current=892
[identifier] start=882 current=893
ScanToken start 893: current 893: char ' '
ScanToken start 893: current 894: char ' '
ScanToken start 893: current 895: char ' '
ScanToken start 893: current 896: char ' '
ScanToken start 893: current 897: char ' '
ScanToken start 893: current 898: char ' '
ScanToken start 893: current 899: char 'T'
Unhandled char: 'T'
[identifier] start=893 current=900
[identifier] start=893 current=901
[identifier] start=893 current=902
[identifier] start=893 current=903
[identifier] start=893 current=904
[identifier] start=893 current=905
[identifier] start=893 current=906
[identifier] start=893 current=907
[identifier] start=893 current=908
ScanToken start 908: current 908: char ' '
ScanToken start 908: current 909: char '='
ScanToken start 910: current 910: char ' '
ScanToken start 910: current 911: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:" \"REPO\"", Literal:"\"REPO", Line:34}
ScanToken start 917: current 917: char '\n'
ScanToken start 917: current 918: char '\t'
ScanToken start 917: current 919: char 'T'
Unhandled char: 'T'
[identifier] start=917 current=920
[identifier] start=917 current=921
[identifier] start=917 current=922
[identifier] start=917 current=923
[identifier] start=917 current=924
[identifier] start=917 current=925
[identifier] start=917 current=926
[identifier] start=917 current=927
[identifier] start=917 current=928
[identifier] start=917 current=929
[identifier] start=917 current=930
ScanToken start 930: current 930: char ' '
ScanToken start 930: current 931: char ' '
ScanToken start 930: current 932: char ' '
ScanToken start 930: current 933: char ' '
ScanToken start 930: current 934: char 'T'
Unhandled char: 'T'
[identifier] start=930 current=935
[identifier] start=930 current=936
[identifier] start=930 current=937
[identifier] start=930 current=938
[identifier] start=930 current=939
[identifier] start=930 current=940
[identifier] start=930 current=941
[identifier] start=930 current=942
[identifier] start=930 current=943
ScanToken start 943: current 943: char ' '
ScanToken start 943: current 944: char '='
ScanToken start 945: current 945: char ' '
ScanToken start 945: current 946: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:" \"BRANCH\"", Literal:"\"BRANCH", Line:35}
ScanToken start 954: current 954: char '\n'
ScanToken start 954: current 955: char '\t'
ScanToken start 954: current 956: char 'T'
Unhandled char: 'T'
[identifier] start=954 current=957
[identifier] start=954 current=958
[identifier] start=954 current=959
[identifier] start=954 current=960
[identifier] start=954 current=961
[identifier] start=954 current=962
[identifier] start=954 current=963
ScanToken start 963: current 963: char ' '
ScanToken start 963: current 964: char ' '
ScanToken start 963: current 965: char ' '
ScanToken start 963: current 966: char ' '
ScanToken start 963: current 967: char ' '
ScanToken start 963: current 968: char ' '
ScanToken start 963: current 969: char ' '
ScanToken start 963: current 970: char ' '
ScanToken start 963: current 971: char 'T'
Unhandled char: 'T'
[identifier] start=963 current=972
[identifier] start=963 current=973
[identifier] start=963 current=974
[identifier] start=963 current=975
[identifier] start=963 current=976
[identifier] start=963 current=977
[identifier] start=963 current=978
[identifier] start=963 current=979
[identifier] start=963 current=980
ScanToken start 980: current 980: char ' '
ScanToken start 980: current 981: char '='
ScanToken start 982: current 982: char ' '
ScanToken start 982: current 983: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:" \"KEYWORD\"", Literal:"\"KEYWORD", Line:36}
ScanToken start 992: current 992: char '\n'
ScanToken start 992: current 993: char '\t'
ScanToken start 992: current 994: char 'T'
Unhandled char: 'T'
[identifier] start=992 current=995
[identifier] start=992 current=996
[identifier] start=992 current=997
[identifier] start=992 current=998
[identifier] start=992 current=999
[identifier] start=992 current=1000
[identifier] start=992 current=1001
[identifier] start=992 current=1002
[identifier] start=992 current=1003
ScanToken start 1003: current 1003: char ' '
ScanToken start 1003: current 1004: char ' '
ScanToken start 1003: current 1005: char ' '
ScanToken start 1003: current 1006: char ' '
ScanToken start 1003: current 1007: char ' '
ScanToken start 1003: current 1008: char ' '
ScanToken start 1003: current 1009: char 'T'
Unhandled char: 'T'
[identifier] start=1003 current=1010
[identifier] start=1003 current=1011
[identifier] start=1003 current=1012
[identifier] start=1003 current=1013
[identifier] start=1003 current=1014
[identifier] start=1003 current=1015
[identifier] start=1003 current=1016
[identifier] start=1003 current=1017
[identifier] start=1003 current=1018
ScanToken start 1018: current 1018: char ' '
ScanToken start 1018: current 1019: char '='
ScanToken start 1020: current 1020: char ' '
ScanToken start 1020: current 1021: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:" \"KEYWORD\"", Literal:"\"KEYWORD", Line:37}
ScanToken start 1030: current 1030: char '\n'
ScanToken start 1030: current 1031: char '\t'
ScanToken start 1030: current 1032: char 'T'
Unhandled char: 'T'
[identifier] start=1030 current=1033
[identifier] start=1030 current=1034
[identifier] start=1030 current=1035
[identifier] start=1030 current=1036
[identifier] start=1030 current=1037
[identifier] start=1030 current=1038
[identifier] start=1030 current=1039
[identifier] start=1030 current=1040
[identifier] start=1030 current=1041
[identifier] start=1030 current=1042
[identifier] start=1030 current=1043
[identifier] start=1030 current=1044
ScanToken start 1044: current 1044: char ' '
ScanToken start 1044: current 1045: char ' '
ScanToken start 1044: current 1046: char ' '
ScanToken start 1044: current 1047: char 'T'
Unhandled char: 'T'
[identifier] start=1044 current=1048
[identifier] start=1044 current=1049
[identifier] start=1044 current=1050
[identifier] start=1044 current=1051
[identifier] start=1044 current=1052
[identifier] start=1044 current=1053
[identifier] start=1044 current=1054
[identifier] start=1044 current=1055
[identifier] start=1044 current=1056
ScanToken start 1056: current 1056: char ' '
ScanToken start 1056: current 1057: char '='
ScanToken start 1058: current 1058: char ' '
ScanToken start 1058: current 1059: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:" \"EQUAL_EQUAL\"", Literal:"\"EQUAL_EQUAL", Line:38}
ScanToken start 1072: current 1072: char '\n'
ScanToken start 1072: current 1073: char '\t'
ScanToken start 1072: current 1074: char 'T'
Unhandled char: 'T'
[identifier] start=1072 current=1075
[identifier] start=1072 current=1076
[identifier] start=1072 current=1077
[identifier] start=1072 current=1078
[identifier] start=1072 current=1079
[identifier] start=1072 current=1080
[identifier] start=1072 current=1081
[identifier] start=1072 current=1082
[identifier] start=1072 current=1083
[identifier] start=1072 current=1084
[identifier] start=1072 current=1085
[identifier] start=1072 current=1086
[identifier] start=1072 current=1087
ScanToken start 1087: current 1087: char ' '
ScanToken start 1087: current 1088: char ' '
ScanToken start 1087: current 1089: char 'T'
Unhandled char: 'T'
[identifier] start=1087 current=1090
[identifier] start=1087 current=1091
[identifier] start=1087 current=1092
[identifier] start=1087 current=1093
[identifier] start=1087 current=1094
[identifier] start=1087 current=1095
[identifier] start=1087 current=1096
[identifier] start=1087 current=1097
[identifier] start=1087 current=1098
ScanToken start 1098: current 1098: char ' '
ScanToken start 1098: current 1099: char '='
ScanToken start 1100: current 1100: char ' '
ScanToken start 1100: current 1101: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:" \"BANG_EQUAL\"", Literal:"\"BANG_EQUAL", Line:39}
ScanToken start 1113: current 1113: char '\n'
ScanToken start 1113: current 1114: char '\t'
ScanToken start 1113: current 1115: char 'T'
Unhandled char: 'T'
[identifier] start=1113 current=1116
[identifier] start=1113 current=1117
[identifier] start=1113 current=1118
[identifier] start=1113 current=1119
[identifier] start=1113 current=1120
[identifier] start=1113 current=1121
[identifier] start=1113 current=1122
[identifier] start=1113 current=1123
[identifier] start=1113 current=1124
[identifier] start=1113 current=1125
[identifier] start=1113 current=1126
[identifier] start=1113 current=1127
ScanToken start 1127: current 1127: char ' '
ScanToken start 1127: current 1128: char ' '
ScanToken start 1127: current 1129: char ' '
ScanToken start 1127: current 1130: char 'T'
Unhandled char: 'T'
[identifier] start=1127 current=1131
[identifier] start=1127 current=1132
[identifier] start=1127 current=1133
[identifier] start=1127 current=1134
[identifier] start=1127 current=1135
[identifier] start=1127 current=1136
[identifier] start=1127 current=1137
[identifier] start=1127 current=1138
[identifier] start=1127 current=1139
ScanToken start 1139: current 1139: char ' '
ScanToken start 1139: current 1140: char '='
ScanToken start 1141: current 1141: char ' '
ScanToken start 1141: current 1142: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:" \"GREATER\"", Literal:"\"GREATER", Line:40}
ScanToken start 1151: current 1151: char '\n'
ScanToken start 1151: current 1152: char '\t'
ScanToken start 1151: current 1153: char 'T'
Unhandled char: 'T'
[identifier] start=1151 current=1154
[identifier] start=1151 current=1155
[identifier] start=1151 current=1156
[identifier] start=1151 current=1157
[identifier] start=1151 current=1158
[identifier] start=1151 current=1159
[identifier] start=1151 current=1160
[identifier] start=1151 current=1161
[identifier] start=1151 current=1162
ScanToken start 1162: current 1162: char ' '
ScanToken start 1162: current 1163: char ' '
ScanToken start 1162: current 1164: char ' '
ScanToken start 1162: current 1165: char ' '
ScanToken start 1162: current 1166: char ' '
ScanToken start 1162: current 1167: char ' '
ScanToken start 1162: current 1168: char 'T'
Unhandled char: 'T'
[identifier] start=1162 current=1169
[identifier] start=1162 current=1170
[identifier] start=1162 current=1171
[identifier] start=1162 current=1172
[identifier] start=1162 current=1173
[identifier] start=1162 current=1174
[identifier] start=1162 current=1175
[identifier] start=1162 current=1176
[identifier] start=1162 current=1177
ScanToken start 1177: current 1177: char ' '
ScanToken start 1177: current 1178: char '='
ScanToken start 1179: current 1179: char ' '
ScanToken start 1179: current 1180: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:" \"LESS\"", Literal:"\"LESS", Line:41}
ScanToken start 1186: current 1186: char '\n'
ScanToken start 1186: current 1187: char '\t'
ScanToken start 1186: current 1188: char 'T'
Unhandled char: 'T'
[identifier] start=1186 current=1189
[identifier] start=1186 current=1190
[identifier] start=1186 current=1191
[identifier] start=1186 current=1192
[identifier] start=1186 current=1193
[identifier] start=1186 current=1194
[identifier] start=1186 current=1195
[identifier] start=1186 current=1196
[identifier] start=1186 current=1197
[identifier] start=1186 current=1198
[identifier] start=1186 current=1199
[identifier] start=1186 current=1200
[identifier] start=1186 current=1201
[identifier] start=1186 current=1202
ScanToken start 1202: current 1202: char ' '
ScanToken start 1202: current 1203: char 'T'
Unhandled char: 'T'
[identifier] start=1202 current=1204
[identifier] start=1202 current=1205
[identifier] start=1202 current=1206
[identifier] start=1202 current=1207
[identifier] start=1202 current=1208
[identifier] start=1202 current=1209
[identifier] start=1202 current=1210
[identifier] start=1202 current=1211
[identifier] start=1202 current=1212
ScanToken start 1212: current 1212: char ' '
ScanToken start 1212: current 1213: char '='
ScanToken start 1214: current 1214: char ' '
ScanToken start 1214: current 1215: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:" \"GREATER_EQUAL\"", Literal:"\"GREATER_EQUAL", Line:42}
ScanToken start 1230: current 1230: char '\n'
ScanToken start 1230: current 1231: char '\t'
ScanToken start 1230: current 1232: char 'T'
Unhandled char: 'T'
[identifier] start=1230 current=1233
[identifier] start=1230 current=1234
[identifier] start=1230 current=1235
[identifier] start=1230 current=1236
[identifier] start=1230 current=1237
[identifier] start=1230 current=1238
[identifier] start=1230 current=1239
[identifier] start=1230 current=1240
[identifier] start=1230 current=1241
[identifier] start=1230 current=1242
[identifier] start=1230 current=1243
ScanToken start 1243: current 1243: char ' '
ScanToken start 1243: current 1244: char ' '
ScanToken start 1243: current 1245: char ' '
ScanToken start 1243: current 1246: char ' '
ScanToken start 1243: current 1247: char 'T'
Unhandled char: 'T'
[identifier] start=1243 current=1248
[identifier] start=1243 current=1249
[identifier] start=1243 current=1250
[identifier] start=1243 current=1251
[identifier] start=1243 current=1252
[identifier] start=1243 current=1253
[identifier] start=1243 current=1254
[identifier] start=1243 current=1255
[identifier] start=1243 current=1256
ScanToken start 1256: current 1256: char ' '
ScanToken start 1256: current 1257: char '='
ScanToken start 1258: current 1258: char ' '
ScanToken start 1258: current 1259: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:" \"LESS_EQUAL\"", Literal:"\"LESS_EQUAL", Line:43}
ScanToken start 1271: current 1271: char '\n'
ScanToken start 1271: current 1272: char ')'
ScanToken start 1273: current 1273: char '\n'
ScanToken start 1273: current 1274: char '\n'
ScanToken start 1273: current 1275: char 'v'
Unhandled char: 'v'
[identifier] start=1273 current=1276
[identifier] start=1273 current=1277
[identifier] start=1273 current=1278
ScanToken start 1278: current 1278: char ' '
ScanToken start 1278: current 1279: char 'k'
Unhandled char: 'k'
[identifier] start=1278 current=1280
[identifier] start=1278 current=1281
[identifier] start=1278 current=1282
[identifier] start=1278 current=1283
[identifier] start=1278 current=1284
[identifier] start=1278 current=1285
[identifier] start=1278 current=1286
[identifier] start=1278 current=1287
ScanToken start 1287: current 1287: char ' '
ScanToken start 1287: current 1288: char '='
ScanToken start 1289: current 1289: char ' '
ScanToken start 1289: current 1290: char 'm'
Unhandled char: 'm'
[identifier] start=1289 current=1291
[identifier] start=1289 current=1292
[identifier] start=1289 current=1293
ScanToken start 1293: current 1293: char '['
Unhandled char: '['
ScanToken start 1294: current 1294: char 's'
Unhandled char: 's'
[identifier] start=1294 current=1295
[identifier] start=1294 current=1296
[identifier] start=1294 current=1297
[identifier] start=1294 current=1298
[identifier] start=1294 current=1299
[identifier] start=1294 current=1300
ScanToken start 1300: current 1300: char ']'
Unhandled char: ']'
ScanToken start 1301: current 1301: char 'T'
Unhandled char: 'T'
[identifier] start=1301 current=1302
[identifier] start=1301 current=1303
[identifier] start=1301 current=1304
[identifier] start=1301 current=1305
[identifier] start=1301 current=1306
[identifier] start=1301 current=1307
[identifier] start=1301 current=1308
[identifier] start=1301 current=1309
[identifier] start=1301 current=1310
ScanToken start 1310: current 1310: char '{'
Unhandled char: '{'
ScanToken start 1311: current 1311: char '\n'
ScanToken start 1311: current 1312: char '\t'
ScanToken start 1311: current 1313: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:"\n\t\"true\"", Literal:"\t\"true", Line:47}
ScanToken start 1319: current 1319: char ':'
Unhandled char: ':'
ScanToken start 1320: current 1320: char ' '
ScanToken start 1320: current 1321: char ' '
ScanToken start 1320: current 1322: char ' '
ScanToken start 1320: current 1323: char 'T'
Unhandled char: 'T'
[identifier] start=1320 current=1324
[identifier] start=1320 current=1325
[identifier] start=1320 current=1326
[identifier] start=1320 current=1327
[identifier] start=1320 current=1328
[identifier] start=1320 current=1329
[identifier] start=1320 current=1330
[identifier] start=1320 current=1331
[identifier] start=1320 current=1332
ScanToken start 1332: current 1332: char ','
Unhandled char: ','
ScanToken start 1333: current 1333: char '\n'
ScanToken start 1333: current 1334: char '\t'
ScanToken start 1333: current 1335: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:"\n\t\"nil\"", Literal:"\t\"nil", Line:48}
ScanToken start 1340: current 1340: char ':'
Unhandled char: ':'
ScanToken start 1341: current 1341: char ' '
ScanToken start 1341: current 1342: char ' '
ScanToken start 1341: current 1343: char ' '
ScanToken start 1341: current 1344: char ' '
ScanToken start 1341: current 1345: char 'T'
Unhandled char: 'T'
[identifier] start=1341 current=1346
[identifier] start=1341 current=1347
[identifier] start=1341 current=1348
[identifier] start=1341 current=1349
[identifier] start=1341 current=1350
[identifier] start=1341 current=1351
[identifier] start=1341 current=1352
[identifier] start=1341 current=1353
ScanToken start 1353: current 1353: char ','
Unhandled char: ','
ScanToken start 1354: current 1354: char '\n'
ScanToken start 1354: current 1355: char '\t'
ScanToken start 1354: current 1356: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:"\n\t\"false\"", Literal:"\t\"false", Line:49}
ScanToken start 1363: current 1363: char ':'
Unhandled char: ':'
ScanToken start 1364: current 1364: char ' '
ScanToken start 1364: current 1365: char ' '
ScanToken start 1364: current 1366: char 'T'
Unhandled char: 'T'
[identifier] start=1364 current=1367
[identifier] start=1364 current=1368
[identifier] start=1364 current=1369
[identifier] start=1364 current=1370
[identifier] start=1364 current=1371
[identifier] start=1364 current=1372
[identifier] start=1364 current=1373
[identifier] start=1364 current=1374
[identifier] start=1364 current=1375
[identifier] start=1364 current=1376
ScanToken start 1376: current 1376: char ','
Unhandled char: ','
ScanToken start 1377: current 1377: char '\n'
ScanToken start 1377: current 1378: char '\t'
ScanToken start 1377: current 1379: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:"\n\t\"if\"", Literal:"\t\"if", Line:50}
ScanToken start 1383: current 1383: char ':'
Unhandled char: ':'
ScanToken start 1384: current 1384: char ' '
ScanToken start 1384: current 1385: char ' '
ScanToken start 1384: current 1386: char ' '
ScanToken start 1384: current 1387: char ' '
ScanToken start 1384: current 1388: char ' '
ScanToken start 1384: current 1389: char 'T'
Unhandled char: 'T'
[identifier] start=1384 current=1390
[identifier] start=1384 current=1391
[identifier] start=1384 current=1392
[identifier] start=1384 current=1393
[identifier] start=1384 current=1394
[identifier] start=1384 current=1395
[identifier] start=1384 current=1396
ScanToken start 1396: current 1396: char ','
Unhandled char: ','
ScanToken start 1397: current 1397: char '\n'
ScanToken start 1397: current 1398: char '\t'
ScanToken start 1397: current 1399: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:"\n\t\"else\"", Literal:"\t\"else", Line:51}
ScanToken start 1405: current 1405: char ':'
Unhandled char: ':'
ScanToken start 1406: current 1406: char ' '
ScanToken start 1406: current 1407: char ' '
ScanToken start 1406: current 1408: char ' '
ScanToken start 1406: current 1409: char 'T'
Unhandled char: 'T'
[identifier] start=1406 current=1410
[identifier] start=1406 current=1411
[identifier] start=1406 current=1412
[identifier] start=1406 current=1413
[identifier] start=1406 current=1414
[identifier] start=1406 current=1415
[identifier] start=1406 current=1416
[identifier] start=1406 current=1417
[identifier] start=1406 current=1418
ScanToken start 1418: current 1418: char ','
Unhandled char: ','
ScanToken start 1419: current 1419: char '\n'
ScanToken start 1419: current 1420: char '\t'
ScanToken start 1419: current 1421: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:"\n\t\"for\"", Literal:"\t\"for", Line:52}
ScanToken start 1426: current 1426: char ':'
Unhandled char: ':'
ScanToken start 1427: current 1427: char ' '
ScanToken start 1427: current 1428: char ' '
ScanToken start 1427: current 1429: char ' '
ScanToken start 1427: current 1430: char ' '
ScanToken start 1427: current 1431: char 'T'
Unhandled char: 'T'
[identifier] start=1427 current=1432
[identifier] start=1427 current=1433
[identifier] start=1427 current=1434
[identifier] start=1427 current=1435
[identifier] start=1427 current=1436
[identifier] start=1427 current=1437
[identifier] start=1427 current=1438
[identifier] start=1427 current=1439
ScanToken start 1439: current 1439: char ','
Unhandled char: ','
ScanToken start 1440: current 1440: char '\n'
ScanToken start 1440: current 1441: char '\t'
ScanToken start 1440: current 1442: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:"\n\t\"in\"", Literal:"\t\"in", Line:53}
ScanToken start 1446: current 1446: char ':'
Unhandled char: ':'
ScanToken start 1447: current 1447: char ' '
ScanToken start 1447: current 1448: char ' '
ScanToken start 1447: current 1449: char ' '
ScanToken start 1447: current 1450: char ' '
ScanToken start 1447: current 1451: char ' '
ScanToken start 1447: current 1452: char 'T'
Unhandled char: 'T'
[identifier] start=1447 current=1453
[identifier] start=1447 current=1454
[identifier] start=1447 current=1455
[identifier] start=1447 current=1456
[identifier] start=1447 current=1457
[identifier] start=1447 current=1458
[identifier] start=1447 current=1459
ScanToken start 1459: current 1459: char ','
Unhandled char: ','
ScanToken start 1460: current 1460: char '\n'
ScanToken start 1460: current 1461: char '\t'
ScanToken start 1460: current 1462: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:"\n\t\"var\"", Literal:"\t\"var", Line:54}
ScanToken start 1467: current 1467: char ':'
Unhandled char: ':'
ScanToken start 1468: current 1468: char ' '
ScanToken start 1468: current 1469: char ' '
ScanToken start 1468: current 1470: char ' '
ScanToken start 1468: current 1471: char ' '
ScanToken start 1468: current 1472: char 'T'
Unhandled char: 'T'
[identifier] start=1468 current=1473
[identifier] start=1468 current=1474
[identifier] start=1468 current=1475
[identifier] start=1468 current=1476
[identifier] start=1468 current=1477
[identifier] start=1468 current=1478
[identifier] start=1468 current=1479
[identifier] start=1468 current=1480
ScanToken start 1480: current 1480: char ','
Unhandled char: ','
ScanToken start 1481: current 1481: char '\n'
ScanToken start 1481: current 1482: char '\t'
ScanToken start 1481: current 1483: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:"\n\t\"repo\"", Literal:"\t\"repo", Line:55}
ScanToken start 1489: current 1489: char ':'
Unhandled char: ':'
ScanToken start 1490: current 1490: char ' '
ScanToken start 1490: current 1491: char ' '
ScanToken start 1490: current 1492: char ' '
ScanToken start 1490: current 1493: char 'T'
Unhandled char: 'T'
[identifier] start=1490 current=1494
[identifier] start=1490 current=1495
[identifier] start=1490 current=1496
[identifier] start=1490 current=1497
[identifier] start=1490 current=1498
[identifier] start=1490 current=1499
[identifier] start=1490 current=1500
[identifier] start=1490 current=1501
[identifier] start=1490 current=1502
ScanToken start 1502: current 1502: char ','
Unhandled char: ','
ScanToken start 1503: current 1503: char '\n'
ScanToken start 1503: current 1504: char '\t'
ScanToken start 1503: current 1505: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:"\n\t\"branch\"", Literal:"\t\"branch", Line:56}
ScanToken start 1513: current 1513: char ':'
Unhandled char: ':'
ScanToken start 1514: current 1514: char ' '
ScanToken start 1514: current 1515: char 'T'
Unhandled char: 'T'
[identifier] start=1514 current=1516
[identifier] start=1514 current=1517
[identifier] start=1514 current=1518
[identifier] start=1514 current=1519
[identifier] start=1514 current=1520
[identifier] start=1514 current=1521
[identifier] start=1514 current=1522
[identifier] start=1514 current=1523
[identifier] start=1514 current=1524
[identifier] start=1514 current=1525
[identifier] start=1514 current=1526
ScanToken start 1526: current 1526: char ','
Unhandled char: ','
ScanToken start 1527: current 1527: char '\n'
ScanToken start 1527: current 1528: char '}'
Unhandled char: '}'
ScanToken start 1529: current 1529: char '\n'
ScanToken start 1529: current 1530: char '\n'
ScanToken start 1529: current 1531: char 'f'
Unhandled char: 'f'
[identifier] start=1529 current=1532
[identifier] start=1529 current=1533
[identifier] start=1529 current=1534
[identifier] start=1529 current=1535
ScanToken start 1535: current 1535: char ' '
ScanToken start 1535: current 1536: char 'm'
Unhandled char: 'm'
[identifier] start=1535 current=1537
[identifier] start=1535 current=1538
[identifier] start=1535 current=1539
[identifier] start=1535 current=1540
ScanToken start 1540: current 1540: char '('
ScanToken start 1541: current 1541: char ')'
ScanToken start 1542: current 1542: char ' '
ScanToken start 1542: current 1543: char '{'
Unhandled char: '{'
ScanToken start 1544: current 1544: char '\n'
ScanToken start 1544: current 1545: char '\n'
ScanToken start 1544: current 1546: char '\t'
ScanToken start 1544: current 1547: char 'i'
Unhandled char: 'i'
[identifier] start=1544 current=1548
[identifier] start=1544 current=1549
ScanToken start 1549: current 1549: char ' '
ScanToken start 1549: current 1550: char 'l'
Unhandled char: 'l'
[identifier] start=1549 current=1551
[identifier] start=1549 current=1552
[identifier] start=1549 current=1553
ScanToken start 1553: current 1553: char '('
ScanToken start 1554: current 1554: char 'o'
Unhandled char: 'o'
[identifier] start=1554 current=1555
[identifier] start=1554 current=1556
ScanToken start 1556: current 1556: char '.'
Unhandled char: '.'
ScanToken start 1557: current 1557: char 'A'
Unhandled char: 'A'
[identifier] start=1557 current=1558
[identifier] start=1557 current=1559
[identifier] start=1557 current=1560
[identifier] start=1557 current=1561
ScanToken start 1561: current 1561: char ')'
ScanToken start 1562: current 1562: char ' '
ScanToken start 1562: current 1563: char '>'
Unhandled char: '>'
ScanToken start 1564: current 1564: char ' '
ScanToken start 1564: current 1565: char '2'
Unhandled char: '2'
ScanToken start 1566: current 1566: char ' '
ScanToken start 1566: current 1567: char '{'
Unhandled char: '{'
ScanToken start 1568: current 1568: char '\n'
ScanToken start 1568: current 1569: char '\t'
ScanToken start 1568: current 1570: char '\t'
ScanToken start 1568: current 1571: char 'f'
Unhandled char: 'f'
[identifier] start=1568 current=1572
[identifier] start=1568 current=1573
[identifier] start=1568 current=1574
ScanToken start 1574: current 1574: char '.'
Unhandled char: '.'
ScanToken start 1575: current 1575: char 'F'
Unhandled char: 'F'
[identifier] start=1575 current=1576
[identifier] start=1575 current=1577
[identifier] start=1575 current=1578
[identifier] start=1575 current=1579
[identifier] start=1575 current=1580
[identifier] start=1575 current=1581
[identifier] start=1575 current=1582
[identifier] start=1575 current=1583
ScanToken start 1583: current 1583: char '('
ScanToken start 1584: current 1584: char 'o'
Unhandled char: 'o'
[identifier] start=1584 current=1585
[identifier] start=1584 current=1586
ScanToken start 1586: current 1586: char '.'
Unhandled char: '.'
ScanToken start 1587: current 1587: char 'S'
Unhandled char: 'S'
[identifier] start=1587 current=1588
[identifier] start=1587 current=1589
[identifier] start=1587 current=1590
[identifier] start=1587 current=1591
[identifier] start=1587 current=1592
[identifier] start=1587 current=1593
ScanToken start 1593: current 1593: char ','
Unhandled char: ','
ScanToken start 1594: current 1594: char ' '
ScanToken start 1594: current 1595: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:" \"Usage: niftel <file.nif>\"", Literal:"\"Usage: niftel <file.nif>", Line:62}
ScanToken start 1621: current 1621: char ')'
ScanToken start 1622: current 1622: char '\n'
ScanToken start 1622: current 1623: char '\t'
ScanToken start 1622: current 1624: char '\t'
ScanToken start 1622: current 1625: char 'o'
Unhandled char: 'o'
[identifier] start=1622 current=1626
[identifier] start=1622 current=1627
ScanToken start 1627: current 1627: char '.'
Unhandled char: '.'
ScanToken start 1628: current 1628: char 'E'
Unhandled char: 'E'
[identifier] start=1628 current=1629
[identifier] start=1628 current=1630
[identifier] start=1628 current=1631
[identifier] start=1628 current=1632
ScanToken start 1632: current 1632: char '('
ScanToken start 1633: current 1633: char '1'
Unhandled char: '1'
ScanToken start 1634: current 1634: char ')'
ScanToken start 1635: current 1635: char '\n'
ScanToken start 1635: current 1636: char '\t'
ScanToken start 1635: current 1637: char '}'
Unhandled char: '}'
ScanToken start 1638: current 1638: char '\n'
ScanToken start 1638: current 1639: char '\n'
ScanToken start 1638: current 1640: char '\t'
ScanToken start 1638: current 1641: char 'f'
Unhandled char: 'f'
[identifier] start=1638 current=1642
[identifier] start=1638 current=1643
[identifier] start=1638 current=1644
[identifier] start=1638 current=1645
[identifier] start=1638 current=1646
[identifier] start=1638 current=1647
[identifier] start=1638 current=1648
[identifier] start=1638 current=1649
ScanToken start 1649: current 1649: char ' '
ScanToken start 1649: current 1650: char ':'
Unhandled char: ':'
ScanToken start 1651: current 1651: char '='
ScanToken start 1652: current 1652: char ' '
ScanToken start 1652: current 1653: char 'o'
Unhandled char: 'o'
[identifier] start=1652 current=1654
[identifier] start=1652 current=1655
ScanToken start 1655: current 1655: char '.'
Unhandled char: '.'
ScanToken start 1656: current 1656: char 'A'
Unhandled char: 'A'
[identifier] start=1656 current=1657
[identifier] start=1656 current=1658
[identifier] start=1656 current=1659
[identifier] start=1656 current=1660
ScanToken start 1660: current 1660: char '['
Unhandled char: '['
ScanToken start 1661: current 1661: char '1'
Unhandled char: '1'
ScanToken start 1662: current 1662: char ']'
Unhandled char: ']'
ScanToken start 1663: current 1663: char '\n'
ScanToken start 1663: current 1664: char '\n'
ScanToken start 1663: current 1665: char '\t'
ScanToken start 1663: current 1666: char 'd'
Unhandled char: 'd'
[identifier] start=1663 current=1667
[identifier] start=1663 current=1668
[identifier] start=1663 current=1669
[identifier] start=1663 current=1670
ScanToken start 1670: current 1670: char ','
Unhandled char: ','
ScanToken start 1671: current 1671: char ' '
ScanToken start 1671: current 1672: char 'e'
Unhandled char: 'e'
[identifier] start=1671 current=1673
[identifier] start=1671 current=1674
[identifier] start=1671 current=1675
ScanToken start 1675: current 1675: char ' '
ScanToken start 1675: current 1676: char ':'
Unhandled char: ':'
ScanToken start 1677: current 1677: char '='
ScanToken start 1678: current 1678: char ' '
ScanToken start 1678: current 1679: char 'o'
Unhandled char: 'o'
[identifier] start=1678 current=1680
[identifier] start=1678 current=1681
ScanToken start 1681: current 1681: char '.'
Unhandled char: '.'
ScanToken start 1682: current 1682: char 'R'
Unhandled char: 'R'
[identifier] start=1682 current=1683
[identifier] start=1682 current=1684
[identifier] start=1682 current=1685
[identifier] start=1682 current=1686
[identifier] start=1682 current=1687
[identifier] start=1682 current=1688
[identifier] start=1682 current=1689
[identifier] start=1682 current=1690
ScanToken start 1690: current 1690: char '('
ScanToken start 1691: current 1691: char 'f'
Unhandled char: 'f'
[identifier] start=1691 current=1692
[identifier] start=1691 current=1693
[identifier] start=1691 current=1694
[identifier] start=1691 current=1695
[identifier] start=1691 current=1696
[identifier] start=1691 current=1697
[identifier] start=1691 current=1698
[identifier] start=1691 current=1699
ScanToken start 1699: current 1699: char ')'
ScanToken start 1700: current 1700: char '\n'
ScanToken start 1700: current 1701: char '\t'
ScanToken start 1700: current 1702: char 'i'
Unhandled char: 'i'
[identifier] start=1700 current=1703
[identifier] start=1700 current=1704
ScanToken start 1704: current 1704: char ' '
ScanToken start 1704: current 1705: char 'e'
Unhandled char: 'e'
[identifier] start=1704 current=1706
[identifier] start=1704 current=1707
[identifier] start=1704 current=1708
ScanToken start 1708: current 1708: char ' '
ScanToken start 1708: current 1709: char '!'
Unhandled char: '!'
ScanToken start 1710: current 1710: char '='
ScanToken start 1711: current 1711: char ' '
ScanToken start 1711: current 1712: char 'n'
Unhandled char: 'n'
[identifier] start=1711 current=1713
[identifier] start=1711 current=1714
[identifier] start=1711 current=1715
ScanToken start 1715: current 1715: char ' '
ScanToken start 1715: current 1716: char '{'
Unhandled char: '{'
ScanToken start 1717: current 1717: char '\n'
ScanToken start 1717: current 1718: char '\t'
ScanToken start 1717: current 1719: char '\t'
ScanToken start 1717: current 1720: char 'f'
Unhandled char: 'f'
[identifier] start=1717 current=1721
[identifier] start=1717 current=1722
[identifier] start=1717 current=1723
ScanToken start 1723: current 1723: char '.'
Unhandled char: '.'
ScanToken start 1724: current 1724: char 'F'
Unhandled char: 'F'
[identifier] start=1724 current=1725
[identifier] start=1724 current=1726
[identifier] start=1724 current=1727
[identifier] start=1724 current=1728
[identifier] start=1724 current=1729
[identifier] start=1724 current=1730
[identifier] start=1724 current=1731
ScanToken start 1731: current 1731: char '('
ScanToken start 1732: current 1732: char 'o'
Unhandled char: 'o'
[identifier] start=1732 current=1733
[identifier] start=1732 current=1734
ScanToken start 1734: current 1734: char '.'
Unhandled char: '.'
ScanToken start 1735: current 1735: char 'S'
Unhandled char: 'S'
[identifier] start=1735 current=1736
[identifier] start=1735 current=1737
[identifier] start=1735 current=1738
[identifier] start=1735 current=1739
[identifier] start=1735 current=1740
[identifier] start=1735 current=1741
ScanToken start 1741: current 1741: char ','
Unhandled char: ','
ScanToken start 1742: current 1742: char ' '
ScanToken start 1742: current 1743: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:" \"Failed to read file %s: %v\\n\"", Literal:"\"Failed to read file %s: %v\\n", Line:70}
ScanToken start 1773: current 1773: char ','
Unhandled char: ','
ScanToken start 1774: current 1774: char ' '
ScanToken start 1774: current 1775: char 'f'
Unhandled char: 'f'
[identifier] start=1774 current=1776
[identifier] start=1774 current=1777
[identifier] start=1774 current=1778
[identifier] start=1774 current=1779
[identifier] start=1774 current=1780
[identifier] start=1774 current=1781
[identifier] start=1774 current=1782
[identifier] start=1774 current=1783
ScanToken start 1783: current 1783: char ','
Unhandled char: ','
ScanToken start 1784: current 1784: char ' '
ScanToken start 1784: current 1785: char 'e'
Unhandled char: 'e'
[identifier] start=1784 current=1786
[identifier] start=1784 current=1787
[identifier] start=1784 current=1788
ScanToken start 1788: current 1788: char ')'
ScanToken start 1789: current 1789: char '\n'
ScanToken start 1789: current 1790: char '\t'
ScanToken start 1789: current 1791: char '\t'
ScanToken start 1789: current 1792: char 'o'
Unhandled char: 'o'
[identifier] start=1789 current=1793
[identifier] start=1789 current=1794
ScanToken start 1794: current 1794: char '.'
Unhandled char: '.'
ScanToken start 1795: current 1795: char 'E'
Unhandled char: 'E'
[identifier] start=1795 current=1796
[identifier] start=1795 current=1797
[identifier] start=1795 current=1798
[identifier] start=1795 current=1799
ScanToken start 1799: current 1799: char '('
ScanToken start 1800: current 1800: char '1'
Unhandled char: '1'
ScanToken start 1801: current 1801: char ')'
ScanToken start 1802: current 1802: char '\n'
ScanToken start 1802: current 1803: char '\t'
ScanToken start 1802: current 1804: char '}'
Unhandled char: '}'
ScanToken start 1805: current 1805: char '\n'
ScanToken start 1805: current 1806: char '\t'
ScanToken start 1805: current 1807: char 'l'
Unhandled char: 'l'
[identifier] start=1805 current=1808
[identifier] start=1805 current=1809
[identifier] start=1805 current=1810
ScanToken start 1810: current 1810: char '.'
Unhandled char: '.'
ScanToken start 1811: current 1811: char 'P'
Unhandled char: 'P'
[identifier] start=1811 current=1812
[identifier] start=1811 current=1813
[identifier] start=1811 current=1814
[identifier] start=1811 current=1815
[identifier] start=1811 current=1816
ScanToken start 1816: current 1816: char '('
ScanToken start 1817: current 1817: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:"\"Reading source code...\"", Literal:"Reading source code...", Line:73}
ScanToken start 1841: current 1841: char ')'
ScanToken start 1842: current 1842: char '\n'
ScanToken start 1842: current 1843: char '\n'
ScanToken start 1842: current 1844: char '\t'
ScanToken start 1842: current 1845: char 's'
Unhandled char: 's'
[identifier] start=1842 current=1846
[identifier] start=1842 current=1847
[identifier] start=1842 current=1848
[identifier] start=1842 current=1849
[identifier] start=1842 current=1850
[identifier] start=1842 current=1851
ScanToken start 1851: current 1851: char ' '
ScanToken start 1851: current 1852: char ':'
Unhandled char: ':'
ScanToken start 1853: current 1853: char '='
ScanToken start 1854: current 1854: char ' '
ScanToken start 1854: current 1855: char 's'
Unhandled char: 's'
[identifier] start=1854 current=1856
[identifier] start=1854 current=1857
[identifier] start=1854 current=1858
[identifier] start=1854 current=1859
[identifier] start=1854 current=1860
[identifier] start=1854 current=1861
ScanToken start 1861: current 1861: char '('
ScanToken start 1862: current 1862: char 'd'
Unhandled char: 'd'
[identifier] start=1862 current=1863
[identifier] start=1862 current=1864
[identifier] start=1862 current=1865
[identifier] start=1862 current=1866
ScanToken start 1866: current 1866: char ')'
ScanToken start 1867: current 1867: char '\n'
ScanToken start 1867: current 1868: char '\n'
ScanToken start 1867: current 1869: char '\t'
ScanToken start 1867: current 1870: char 'l'
Unhandled char: 'l'
[identifier] start=1867 current=1871
[identifier] start=1867 current=1872
[identifier] start=1867 current=1873
[identifier] start=1867 current=1874
[identifier] start=1867 current=1875
ScanToken start 1875: current 1875: char ' '
ScanToken start 1875: current 1876: char ':'
Unhandled char: ':'
ScanToken start 1877: current 1877: char '='
ScanToken start 1878: current 1878: char ' '
ScanToken start 1878: current 1879: char 'N'
Unhandled char: 'N'
[identifier] start=1878 current=1880
[identifier] start=1878 current=1881
[identifier] start=1878 current=1882
[identifier] start=1878 current=1883
[identifier] start=1878 current=1884
[identifier] start=1878 current=1885
[identifier] start=1878 current=1886
[identifier] start=1878 current=1887
[identifier] start=1878 current=1888
[identifier] start=1878 current=1889
ScanToken start 1889: current 1889: char '('
ScanToken start 1890: current 1890: char 's'
Unhandled char: 's'
[identifier] start=1890 current=1891
[identifier] start=1890 current=1892
[identifier] start=1890 current=1893
[identifier] start=1890 current=1894
[identifier] start=1890 current=1895
[identifier] start=1890 current=1896
ScanToken start 1896: current 1896: char '('
ScanToken start 1897: current 1897: char 's'
Unhandled char: 's'
[identifier] start=1897 current=1898
[identifier] start=1897 current=1899
[identifier] start=1897 current=1900
[identifier] start=1897 current=1901
[identifier] start=1897 current=1902
[identifier] start=1897 current=1903
ScanToken start 1903: current 1903: char ')'
ScanToken start 1904: current 1904: char ')'
ScanToken start 1905: current 1905: char '\n'
ScanToken start 1905: current 1906: char '\t'
ScanToken start 1905: current 1907: char 't'
Unhandled char: 't'
[identifier] start=1905 current=1908
[identifier] start=1905 current=1909
[identifier] start=1905 current=1910
[identifier] start=1905 current=1911
[identifier] start=1905 current=1912
[identifier] start=1905 current=1913
ScanToken start 1913: current 1913: char ' '
ScanToken start 1913: current 1914: char ':'
Unhandled char: ':'
ScanToken start 1915: current 1915: char '='
ScanToken start 1916: current 1916: char ' '
ScanToken start 1916: current 1917: char 'l'
Unhandled char: 'l'
[identifier] start=1916 current=1918
[identifier] start=1916 current=1919
[identifier] start=1916 current=1920
[identifier] start=1916 current=1921
[identifier] start=1916 current=1922
ScanToken start 1922: current 1922: char '.'
Unhandled char: '.'
ScanToken start 1923: current 1923: char 'S'
Unhandled char: 'S'
[identifier] start=1923 current=1924
[identifier] start=1923 current=1925
[identifier] start=1923 current=1926
[identifier] start=1923 current=1927
[identifier] start=1923 current=1928
[identifier] start=1923 current=1929
[identifier] start=1923 current=1930
[identifier] start=1923 current=1931
[identifier] start=1923 current=1932
[identifier] start=1923 current=1933
ScanToken start 1933: current 1933: char '('
ScanToken start 1934: current 1934: char ')'
ScanToken start 1935: current 1935: char '\n'
ScanToken start 1935: current 1936: char '\n'
ScanToken start 1935: current 1937: char '\t'
ScanToken start 1935: current 1938: char 'f'
Unhandled char: 'f'
[identifier] start=1935 current=1939
[identifier] start=1935 current=1940
[identifier] start=1935 current=1941
ScanToken start 1941: current 1941: char ' '
ScanToken start 1941: current 1942: char 'i'
Unhandled char: 'i'
[identifier] start=1941 current=1943
ScanToken start 1943: current 1943: char ','
Unhandled char: ','
ScanToken start 1944: current 1944: char ' '
ScanToken start 1944: current 1945: char 't'
Unhandled char: 't'
[identifier] start=1944 current=1946
ScanToken start 1946: current 1946: char ' '
ScanToken start 1946: current 1947: char ':'
Unhandled char: ':'
ScanToken start 1948: current 1948: char '='
ScanToken start 1949: current 1949: char ' '
ScanToken start 1949: current 1950: char 'r'
Unhandled char: 'r'
[identifier] start=1949 current=1951
[identifier] start=1949 current=1952
[identifier] start=1949 current=1953
[identifier] start=1949 current=1954
[identifier] start=1949 current=1955
ScanToken start 1955: current 1955: char ' '
ScanToken start 1955: current 1956: char 't'
Unhandled char: 't'
[identifier] start=1955 current=1957
[identifier] start=1955 current=1958
[identifier] start=1955 current=1959
[identifier] start=1955 current=1960
[identifier] start=1955 current=1961
[identifier] start=1955 current=1962
ScanToken start 1962: current 1962: char ' '
ScanToken start 1962: current 1963: char '{'
Unhandled char: '{'
ScanToken start 1964: current 1964: char '\n'
ScanToken start 1964: current 1965: char '\t'
ScanToken start 1964: current 1966: char '\t'
ScanToken start 1964: current 1967: char 'f'
Unhandled char: 'f'
[identifier] start=1964 current=1968
[identifier] start=1964 current=1969
[identifier] start=1964 current=1970
ScanToken start 1970: current 1970: char '.'
Unhandled char: '.'
ScanToken start 1971: current 1971: char 'P'
Unhandled char: 'P'
[identifier] start=1971 current=1972
[identifier] start=1971 current=1973
[identifier] start=1971 current=1974
[identifier] start=1971 current=1975
[identifier] start=1971 current=1976
[identifier] start=1971 current=1977
ScanToken start 1977: current 1977: char '('
ScanToken start 1978: current 1978: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:"\"[%d] TYPE %s\\nLexem: %q,  Literal%v\\n\"", Literal:"[%d] TYPE %s\\nLexem: %q,  Literal%v\\n", Line:81}
ScanToken start 2017: current 2017: char ','
Unhandled char: ','
ScanToken start 2018: current 2018: char ' '
ScanToken start 2018: current 2019: char 'i'
Unhandled char: 'i'
[identifier] start=2018 current=2020
ScanToken start 2020: current 2020: char ','
Unhandled char: ','
ScanToken start 2021: current 2021: char ' '
ScanToken start 2021: current 2022: char 't'
Unhandled char: 't'
[identifier] start=2021 current=2023
ScanToken start 2023: current 2023: char '.'
Unhandled char: '.'
ScanToken start 2024: current 2024: char 'T'
Unhandled char: 'T'
[identifier] start=2024 current=2025
[identifier] start=2024 current=2026
[identifier] start=2024 current=2027
[identifier] start=2024 current=2028
ScanToken start 2028: current 2028: char ','
Unhandled char: ','
ScanToken start 2029: current 2029: char ' '
ScanToken start 2029: current 2030: char 't'
Unhandled char: 't'
[identifier] start=2029 current=2031
ScanToken start 2031: current 2031: char '.'
Unhandled char: '.'
ScanToken start 2032: current 2032: char 'L'
Unhandled char: 'L'
[identifier] start=2032 current=2033
[identifier] start=2032 current=2034
[identifier] start=2032 current=2035
[identifier] start=2032 current=2036
[identifier] start=2032 current=2037
[identifier] start=2032 current=2038
ScanToken start 2038: current 2038: char ','
Unhandled char: ','
ScanToken start 2039: current 2039: char ' '
ScanToken start 2039: current 2040: char 't'
Unhandled char: 't'
[identifier] start=2039 current=2041
ScanToken start 2041: current 2041: char '.'
Unhandled char: '.'
ScanToken start 2042: current 2042: char 'L'
Unhandled char: 'L'
[identifier] start=2042 current=2043
[identifier] start=2042 current=2044
[identifier] start=2042 current=2045
[identifier] start=2042 current=2046
[identifier] start=2042 current=2047
[identifier] start=2042 current=2048
[identifier] start=2042 current=2049
ScanToken start 2049: current 2049: char ')'
ScanToken start 2050: current 2050: char '\n'
ScanToken start 2050: current 2051: char '\t'
ScanToken start 2050: current 2052: char '}'
Unhandled char: '}'
ScanToken start 2053: current 2053: char '\n'
ScanToken start 2053: current 2054: char '\n'
ScanToken start 2053: current 2055: char '\t'
ScanToken start 2053: current 2056: char 'p'
Unhandled char: 'p'
[identifier] start=2053 current=2057
[identifier] start=2053 current=2058
[identifier] start=2053 current=2059
[identifier] start=2053 current=2060
[identifier] start=2053 current=2061
[identifier] start=2053 current=2062
ScanToken start 2062: current 2062: char ' '
ScanToken start 2062: current 2063: char ':'
Unhandled char: ':'
ScanToken start 2064: current 2064: char '='
ScanToken start 2065: current 2065: char ' '
ScanToken start 2065: current 2066: char 'N'
Unhandled char: 'N'
[identifier] start=2065 current=2067
[identifier] start=2065 current=2068
[identifier] start=2065 current=2069
[identifier] start=2065 current=2070
[identifier] start=2065 current=2071
[identifier] start=2065 current=2072
[identifier] start=2065 current=2073
[identifier] start=2065 current=2074
[identifier] start=2065 current=2075
ScanToken start 2075: current 2075: char '('
ScanToken start 2076: current 2076: char 't'
Unhandled char: 't'
[identifier] start=2076 current=2077
[identifier] start=2076 current=2078
[identifier] start=2076 current=2079
[identifier] start=2076 current=2080
[identifier] start=2076 current=2081
[identifier] start=2076 current=2082
ScanToken start 2082: current 2082: char ')'
ScanToken start 2083: current 2083: char '\n'
ScanToken start 2083: current 2084: char '\t'
ScanToken start 2083: current 2085: char 's'
Unhandled char: 's'
[identifier] start=2083 current=2086
[identifier] start=2083 current=2087
[identifier] start=2083 current=2088
[identifier] start=2083 current=2089
[identifier] start=2083 current=2090
[identifier] start=2083 current=2091
[identifier] start=2083 current=2092
[identifier] start=2083 current=2093
[identifier] start=2083 current=2094
[identifier] start=2083 current=2095
ScanToken start 2095: current 2095: char ','
Unhandled char: ','
ScanToken start 2096: current 2096: char ' '
ScanToken start 2096: current 2097: char 'e'
Unhandled char: 'e'
[identifier] start=2096 current=2098
[identifier] start=2096 current=2099
[identifier] start=2096 current=2100
ScanToken start 2100: current 2100: char ' '
ScanToken start 2100: current 2101: char ':'
Unhandled char: ':'
ScanToken start 2102: current 2102: char '='
ScanToken start 2103: current 2103: char ' '
ScanToken start 2103: current 2104: char 'p'
Unhandled char: 'p'
[identifier] start=2103 current=2105
[identifier] start=2103 current=2106
[identifier] start=2103 current=2107
[identifier] start=2103 current=2108
[identifier] start=2103 current=2109
[identifier] start=2103 current=2110
ScanToken start 2110: current 2110: char '.'
Unhandled char: '.'
ScanToken start 2111: current 2111: char 'P'
Unhandled char: 'P'
[identifier] start=2111 current=2112
[identifier] start=2111 current=2113
[identifier] start=2111 current=2114
[identifier] start=2111 current=2115
[identifier] start=2111 current=2116
ScanToken start 2116: current 2116: char '('
ScanToken start 2117: current 2117: char ')'
ScanToken start 2118: current 2118: char '\n'
ScanToken start 2118: current 2119: char '\n'
ScanToken start 2118: current 2120: char '\t'
ScanToken start 2118: current 2121: char 'i'
Unhandled char: 'i'
[identifier] start=2118 current=2122
[identifier] start=2118 current=2123
ScanToken start 2123: current 2123: char ' '
ScanToken start 2123: current 2124: char 'e'
Unhandled char: 'e'
[identifier] start=2123 current=2125
[identifier] start=2123 current=2126
[identifier] start=2123 current=2127
ScanToken start 2127: current 2127: char ' '
ScanToken start 2127: current 2128: char '!'
Unhandled char: '!'
ScanToken start 2129: current 2129: char '='
ScanToken start 2130: current 2130: char ' '
ScanToken start 2130: current 2131: char 'n'
Unhandled char: 'n'
[identifier] start=2130 current=2132
[identifier] start=2130 current=2133
[identifier] start=2130 current=2134
ScanToken start 2134: current 2134: char ' '
ScanToken start 2134: current 2135: char '{'
Unhandled char: '{'
ScanToken start 2136: current 2136: char '\n'
ScanToken start 2136: current 2137: char '\t'
ScanToken start 2136: current 2138: char '\t'
ScanToken start 2136: current 2139: char 'f'
Unhandled char: 'f'
[identifier] start=2136 current=2140
[identifier] start=2136 current=2141
[identifier] start=2136 current=2142
ScanToken start 2142: current 2142: char '.'
Unhandled char: '.'
ScanToken start 2143: current 2143: char 'F'
Unhandled char: 'F'
[identifier] start=2143 current=2144
[identifier] start=2143 current=2145
[identifier] start=2143 current=2146
[identifier] start=2143 current=2147
[identifier] start=2143 current=2148
[identifier] start=2143 current=2149
[identifier] start=2143 current=2150
ScanToken start 2150: current 2150: char '('
ScanToken start 2151: current 2151: char 'o'
Unhandled char: 'o'
[identifier] start=2151 current=2152
[identifier] start=2151 current=2153
ScanToken start 2153: current 2153: char '.'
Unhandled char: '.'
ScanToken start 2154: current 2154: char 'S'
Unhandled char: 'S'
[identifier] start=2154 current=2155
[identifier] start=2154 current=2156
[identifier] start=2154 current=2157
[identifier] start=2154 current=2158
[identifier] start=2154 current=2159
[identifier] start=2154 current=2160
ScanToken start 2160: current 2160: char ','
Unhandled char: ','
ScanToken start 2161: current 2161: char ' '
ScanToken start 2161: current 2162: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:" \"Parsing error: %v\\n\"", Literal:"\"Parsing error: %v\\n", Line:88}
ScanToken start 2183: current 2183: char ','
Unhandled char: ','
ScanToken start 2184: current 2184: char ' '
ScanToken start 2184: current 2185: char 'e'
Unhandled char: 'e'
[identifier] start=2184 current=2186
[identifier] start=2184 current=2187
[identifier] start=2184 current=2188
ScanToken start 2188: current 2188: char ')'
ScanToken start 2189: current 2189: char '\n'
ScanToken start 2189: current 2190: char '\t'
ScanToken start 2189: current 2191: char '\t'
ScanToken start 2189: current 2192: char 'o'
Unhandled char: 'o'
[identifier] start=2189 current=2193
[identifier] start=2189 current=2194
ScanToken start 2194: current 2194: char '.'
Unhandled char: '.'
ScanToken start 2195: current 2195: char 'E'
Unhandled char: 'E'
[identifier] start=2195 current=2196
[identifier] start=2195 current=2197
[identifier] start=2195 current=2198
[identifier] start=2195 current=2199
ScanToken start 2199: current 2199: char '('
ScanToken start 2200: current 2200: char '1'
Unhandled char: '1'
ScanToken start 2201: current 2201: char ')'
ScanToken start 2202: current 2202: char '\n'
ScanToken start 2202: current 2203: char '\t'
ScanToken start 2202: current 2204: char '}'
Unhandled char: '}'
ScanToken start 2205: current 2205: char '\n'
ScanToken start 2205: current 2206: char '\t'
ScanToken start 2205: current 2207: char 'f'
Unhandled char: 'f'
[identifier] start=2205 current=2208
[identifier] start=2205 current=2209
[identifier] start=2205 current=2210
ScanToken start 2210: current 2210: char '.'
Unhandled char: '.'
ScanToken start 2211: current 2211: char 'P'
Unhandled char: 'P'
[identifier] start=2211 current=2212
[identifier] start=2211 current=2213
[identifier] start=2211 current=2214
[identifier] start=2211 current=2215
[identifier] start=2211 current=2216
[identifier] start=2211 current=2217
ScanToken start 2217: current 2217: char '('
ScanToken start 2218: current 2218: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:"\"Parsed %d statements:\\n\"", Literal:"Parsed %d statements:\\n", Line:91}
ScanToken start 2243: current 2243: char ','
Unhandled char: ','
ScanToken start 2244: current 2244: char ' '
ScanToken start 2244: current 2245: char 'l'
Unhandled char: 'l'
[identifier] start=2244 current=2246
[identifier] start=2244 current=2247
[identifier] start=2244 current=2248
ScanToken start 2248: current 2248: char '('
ScanToken start 2249: current 2249: char 's'
Unhandled char: 's'
[identifier] start=2249 current=2250
[identifier] start=2249 current=2251
[identifier] start=2249 current=2252
[identifier] start=2249 current=2253
[identifier] start=2249 current=2254
[identifier] start=2249 current=2255
[identifier] start=2249 current=2256
[identifier] start=2249 current=2257
[identifier] start=2249 current=2258
[identifier] start=2249 current=2259
ScanToken start 2259: current 2259: char ')'
ScanToken start 2260: current 2260: char ')'
ScanToken start 2261: current 2261: char '\n'
ScanToken start 2261: current 2262: char '\t'
ScanToken start 2261: current 2263: char 'f'
Unhandled char: 'f'
[identifier] start=2261 current=2264
[identifier] start=2261 current=2265
[identifier] start=2261 current=2266
ScanToken start 2266: current 2266: char ' '
ScanToken start 2266: current 2267: char '_'
Unhandled char: '_'
ScanToken start 2268: current 2268: char ','
Unhandled char: ','
ScanToken start 2269: current 2269: char ' '
ScanToken start 2269: current 2270: char 's'
Unhandled char: 's'
[identifier] start=2269 current=2271
[identifier] start=2269 current=2272
[identifier] start=2269 current=2273
[identifier] start=2269 current=2274
ScanToken start 2274: current 2274: char ' '
ScanToken start 2274: current 2275: char ':'
Unhandled char: ':'
ScanToken start 2276: current 2276: char '='
ScanToken start 2277: current 2277: char ' '
ScanToken start 2277: current 2278: char 'r'
Unhandled char: 'r'
[identifier] start=2277 current=2279
[identifier] start=2277 current=2280
[identifier] start=2277 current=2281
[identifier] start=2277 current=2282
[identifier] start=2277 current=2283
ScanToken start 2283: current 2283: char ' '
ScanToken start 2283: current 2284: char 's'
Unhandled char: 's'
[identifier] start=2283 current=2285
[identifier] start=2283 current=2286
[identifier] start=2283 current=2287
[identifier] start=2283 current=2288
[identifier] start=2283 current=2289
[identifier] start=2283 current=2290
[identifier] start=2283 current=2291
[identifier] start=2283 current=2292
[identifier] start=2283 current=2293
[identifier] start=2283 current=2294
ScanToken start 2294: current 2294: char ' '
ScanToken start 2294: current 2295: char '{'
Unhandled char: '{'
ScanToken start 2296: current 2296: char '\n'
ScanToken start 2296: current 2297: char '\t'
ScanToken start 2296: current 2298: char '\t'
ScanToken start 2296: current 2299: char 'l'
Unhandled char: 'l'
[identifier] start=2296 current=2300
[identifier] start=2296 current=2301
[identifier] start=2296 current=2302
ScanToken start 2302: current 2302: char '.'
Unhandled char: '.'
ScanToken start 2303: current 2303: char 'P'
Unhandled char: 'P'
[identifier] start=2303 current=2304
[identifier] start=2303 current=2305
[identifier] start=2303 current=2306
[identifier] start=2303 current=2307
[identifier] start=2303 current=2308
[identifier] start=2303 current=2309
[identifier] start=2303 current=2310
ScanToken start 2310: current 2310: char '('
ScanToken start 2311: current 2311: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:"\"parsing file....\"", Literal:"parsing file....", Line:93}
ScanToken start 2329: current 2329: char ')'
ScanToken start 2330: current 2330: char '\n'
ScanToken start 2330: current 2331: char '\t'
ScanToken start 2330: current 2332: char '\t'
ScanToken start 2330: current 2333: char 'f'
Unhandled char: 'f'
[identifier] start=2330 current=2334
[identifier] start=2330 current=2335
[identifier] start=2330 current=2336
ScanToken start 2336: current 2336: char '.'
Unhandled char: '.'
ScanToken start 2337: current 2337: char 'P'
Unhandled char: 'P'
[identifier] start=2337 current=2338
[identifier] start=2337 current=2339
[identifier] start=2337 current=2340
[identifier] start=2337 current=2341
[identifier] start=2337 current=2342
[identifier] start=2337 current=2343
ScanToken start 2343: current 2343: char '('
ScanToken start 2344: current 2344: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:"\"TYPE %T\\nDATA: %#v\\n\"", Literal:"TYPE %T\\nDATA: %#v\\n", Line:94}
ScanToken start 2366: current 2366: char ','
Unhandled char: ','
ScanToken start 2367: current 2367: char ' '
ScanToken start 2367: current 2368: char 's'
Unhandled char: 's'
[identifier] start=2367 current=2369
[identifier] start=2367 current=2370
[identifier] start=2367 current=2371
[identifier] start=2367 current=2372
ScanToken start 2372: current 2372: char ','
Unhandled char: ','
ScanToken start 2373: current 2373: char ' '
ScanToken start 2373: current 2374: char 's'
Unhandled char: 's'
[identifier] start=2373 current=2375
[identifier] start=2373 current=2376
[identifier] start=2373 current=2377
[identifier] start=2373 current=2378
ScanToken start 2378: current 2378: char ')'
ScanToken start 2379: current 2379: char '\n'
ScanToken start 2379: current 2380: char '\t'
ScanToken start 2379: current 2381: char '}'
Unhandled char: '}'
ScanToken start 2382: current 2382: char '\n'
ScanToken start 2382: current 2383: char '\n'
ScanToken start 2382: current 2384: char '}'
Unhandled char: '}'
ScanToken start 2385: current 2385: char '\n'
ScanToken start 2385: current 2386: char '\x00'
[0] TYPE IDENT
Lexem: "package",  Literal<nil>
[1] TYPE IDENT
Lexem: " main",  Literal<nil>
[2] TYPE IDENT
Lexem: "\n\nimport",  Literal<nil>
[3] TYPE LPAREN
Lexem: " (",  Literal<nil>
[4] TYPE STRING
Lexem: "\n\t\"fmt\"",  Literal	"fmt
[5] TYPE STRING
Lexem: "\n\t\"log\"",  Literal	"log
[6] TYPE STRING
Lexem: "\n\t\"os\"",  Literal	"os
[7] TYPE RPAREN
Lexem: "\n)",  Literal<nil>
[8] TYPE IDENT
Lexem: "\n\ntype",  Literal<nil>
[9] TYPE IDENT
Lexem: " TokenType",  Literal<nil>
[10] TYPE IDENT
Lexem: " string",  Literal<nil>
[11] TYPE IDENT
Lexem: "\n\nconst",  Literal<nil>
[12] TYPE LPAREN
Lexem: " (",  Literal<nil>
[13] TYPE IDENT
Lexem: "\n\tTokenEOF",  Literal<nil>
[14] TYPE IDENT
Lexem: "       TokenType",  Literal<nil>
[15] TYPE EQUAL
Lexem: " =",  Literal<nil>
[16] TYPE STRING
Lexem: " \"EOF\"",  Literal"EOF
[17] TYPE IDENT
Lexem: "\n\tTokenIdent",  Literal<nil>
[18] TYPE IDENT
Lexem: "     TokenType",  Literal<nil>
[19] TYPE EQUAL
Lexem: " =",  Literal<nil>
[20] TYPE STRING
Lexem: " \"IDENT\"",  Literal"IDENT
[21] TYPE IDENT
Lexem: "\n\tTokenNumber",  Literal<nil>
[22] TYPE IDENT
Lexem: "    TokenType",  Literal<nil>
[23] TYPE EQUAL
Lexem: " =",  Literal<nil>
[24] TYPE STRING
Lexem: " \"NUMBER\"",  Literal"NUMBER
[25] TYPE IDENT
Lexem: "\n\tTokenString",  Literal<nil>
[26] TYPE IDENT
Lexem: "    TokenType",  Literal<nil>
[27] TYPE EQUAL
Lexem: " =",  Literal<nil>
[28] TYPE STRING
Lexem: " \"STRING\"",  Literal"STRING
[29] TYPE IDENT
Lexem: "\n\tTokenTrue",  Literal<nil>
[30] TYPE IDENT
Lexem: "      TokenType",  Literal<nil>
[31] TYPE EQUAL
Lexem: " =",  Literal<nil>
[32] TYPE STRING
Lexem: " \"TRUE\"",  Literal"TRUE
[33] TYPE IDENT
Lexem: "\n\tTokenNil",  Literal<nil>
[34] TYPE IDENT
Lexem: "       TokenType",  Literal<nil>
[35] TYPE EQUAL
Lexem: " =",  Literal<nil>
[36] TYPE STRING
Lexem: " \"NIL\"",  Literal"NIL
[37] TYPE IDENT
Lexem: "\n\tTokenFalse",  Literal<nil>
[38] TYPE IDENT
Lexem: "     TokenType",  Literal<nil>
[39] TYPE EQUAL
Lexem: " =",  Literal<nil>
[40] TYPE STRING
Lexem: " \"FALSE\"",  Literal"FALSE
[41] TYPE IDENT
Lexem: "\n\tTokenEqal",  Literal<nil>
[42] TYPE IDENT
Lexem: "      TokenType",  Literal<nil>
[43] TYPE EQUAL
Lexem: " =",  Literal<nil>
[44] TYPE STRING
Lexem: " \"EQUAL\"",  Literal"EQUAL
[45] TYPE IDENT
Lexem: "\n\tTokenBang",  Literal<nil>
[46] TYPE IDENT
Lexem: "      TokenType",  Literal<nil>
[47] TYPE EQUAL
Lexem: " =",  Literal<nil>
[48] TYPE STRING
Lexem: " \"BANG\"",  Literal"BANG
[49] TYPE IDENT
Lexem: "\n\tTokenStar",  Literal<nil>
[50] TYPE IDENT
Lexem: "      TokenType",  Literal<nil>
[51] TYPE EQUAL
Lexem: " =",  Literal<nil>
[52] TYPE STRING
Lexem: " \"STAR\"",  Literal"STAR
[53] TYPE IDENT
Lexem: "\n\tTokenFWDSlash",  Literal<nil>
[54] TYPE IDENT
Lexem: "  TokenType",  Literal<nil>
[55] TYPE EQUAL
Lexem: " =",  Literal<nil>
[56] TYPE STRING
Lexem: " \"FWD_SLASH\"",  Literal"FWD_SLASH
[57] TYPE IDENT
Lexem: "\n\tTokenPlus",  Literal<nil>
[58] TYPE IDENT
Lexem: "      TokenType",  Literal<nil>
[59] TYPE EQUAL
Lexem: " =",  Literal<nil>
[60] TYPE STRING
Lexem: " \"PLUS\"",  Literal"PLUS
[61] TYPE IDENT
Lexem: "\n\tTokenMinus",  Literal<nil>
[62] TYPE IDENT
Lexem: "     TokenType",  Literal<nil>
[63] TYPE EQUAL
Lexem: " =",  Literal<nil>
[64] TYPE STRING
Lexem: " \"MINUS\"",  Literal"MINUS
[65] TYPE IDENT
Lexem: "\n\tTokenLParen",  Literal<nil>
[66] TYPE IDENT
Lexem: "    TokenType",  Literal<nil>
[67] TYPE EQUAL
Lexem: " =",  Literal<nil>
[68] TYPE STRING
Lexem: " \"LPAREN\"",  Literal"LPAREN
[69] TYPE IDENT
Lexem: "\n\tTokenRParen",  Literal<nil>
[70] TYPE IDENT
Lexem: "    TokenType",  Literal<nil>
[71] TYPE EQUAL
Lexem: " =",  Literal<nil>
[72] TYPE STRING
Lexem: " \"RPAREN\"",  Literal"RPAREN
[73] TYPE IDENT
Lexem: "\n\tTokenIf",  Literal<nil>
[74] TYPE IDENT
Lexem: "        TokenType",  Literal<nil>
[75] TYPE EQUAL
Lexem: " =",  Literal<nil>
[76] TYPE STRING
Lexem: " \"KEYWORD\"",  Literal"KEYWORD
[77] TYPE IDENT
Lexem: "\n\tTokenFor",  Literal<nil>
[78] TYPE IDENT
Lexem: "       TokenType",  Literal<nil>
[79] TYPE EQUAL
Lexem: " =",  Literal<nil>
[80] TYPE STRING
Lexem: " \"KEYWORD\"",  Literal"KEYWORD
[81] TYPE IDENT
Lexem: "\n\tTokenVar",  Literal<nil>
[82] TYPE IDENT
Lexem: "       TokenType",  Literal<nil>
[83] TYPE EQUAL
Lexem: " =",  Literal<nil>
[84] TYPE STRING
Lexem: " \"KEYWORD\"",  Literal"KEYWORD
[85] TYPE IDENT
Lexem: "\n\tTokenLBrace",  Literal<nil>
[86] TYPE IDENT
Lexem: "    TokenType",  Literal<nil>
[87] TYPE EQUAL
Lexem: " =",  Literal<nil>
[88] TYPE STRING
Lexem: " \"LBRACE\"",  Literal"LBRACE
[89] TYPE IDENT
Lexem: "\n\tTokenRBrace",  Literal<nil>
[90] TYPE IDENT
Lexem: "    TokenType",  Literal<nil>
[91] TYPE EQUAL
Lexem: " =",  Literal<nil>
[92] TYPE STRING
Lexem: " \"RBRACE\"",  Literal"RBRACE
[93] TYPE IDENT
Lexem: "\n\tTokenLBracket",  Literal<nil>
[94] TYPE IDENT
Lexem: "  TokenType",  Literal<nil>
[95] TYPE EQUAL
Lexem: " =",  Literal<nil>
[96] TYPE STRING
Lexem: " \"LBRACKET\"",  Literal"LBRACKET
[97] TYPE IDENT
Lexem: "\n\tTokenRBracket",  Literal<nil>
[98] TYPE IDENT
Lexem: "  TokenType",  Literal<nil>
[99] TYPE EQUAL
Lexem: " =",  Literal<nil>
[100] TYPE STRING
Lexem: " \"RBRACKET\"",  Literal"RBRACKET
[101] TYPE IDENT
Lexem: "\n\tTokenRepo",  Literal<nil>
[102] TYPE IDENT
Lexem: "      TokenType",  Literal<nil>
[103] TYPE EQUAL
Lexem: " =",  Literal<nil>
[104] TYPE STRING
Lexem: " \"REPO\"",  Literal"REPO
[105] TYPE IDENT
Lexem: "\n\tTokenBranch",  Literal<nil>
[106] TYPE IDENT
Lexem: "    TokenType",  Literal<nil>
[107] TYPE EQUAL
Lexem: " =",  Literal<nil>
[108] TYPE STRING
Lexem: " \"BRANCH\"",  Literal"BRANCH
[109] TYPE IDENT
Lexem: "\n\tTokenIn",  Literal<nil>
[110] TYPE IDENT
Lexem: "        TokenType",  Literal<nil>
[111] TYPE EQUAL
Lexem: " =",  Literal<nil>
[112] TYPE STRING
Lexem: " \"KEYWORD\"",  Literal"KEYWORD
[113] TYPE IDENT
Lexem: "\n\tTokenElse",  Literal<nil>
[114] TYPE IDENT
Lexem: "      TokenType",  Literal<nil>
[115] TYPE EQUAL
Lexem: " =",  Literal<nil>
[116] TYPE STRING
Lexem: " \"KEYWORD\"",  Literal"KEYWORD
[117] TYPE IDENT
Lexem: "\n\tTokenEqality",  Literal<nil>
[118] TYPE IDENT
Lexem: "   TokenType",  Literal<nil>
[119] TYPE EQUAL
Lexem: " =",  Literal<nil>
[120] TYPE STRING
Lexem: " \"EQUAL_EQUAL\"",  Literal"EQUAL_EQUAL
[121] TYPE IDENT
Lexem: "\n\tTokenBangEqal",  Literal<nil>
[122] TYPE IDENT
Lexem: "  TokenType",  Literal<nil>
[123] TYPE EQUAL
Lexem: " =",  Literal<nil>
[124] TYPE STRING
Lexem: " \"BANG_EQUAL\"",  Literal"BANG_EQUAL
[125] TYPE IDENT
Lexem: "\n\tTokenGreater",  Literal<nil>
[126] TYPE IDENT
Lexem: "   TokenType",  Literal<nil>
[127] TYPE EQUAL
Lexem: " =",  Literal<nil>
[128] TYPE STRING
Lexem: " \"GREATER\"",  Literal"GREATER
[129] TYPE IDENT
Lexem: "\n\tTokenLess",  Literal<nil>
[130] TYPE IDENT
Lexem: "      TokenType",  Literal<nil>
[131] TYPE EQUAL
Lexem: " =",  Literal<nil>
[132] TYPE STRING
Lexem: " \"LESS\"",  Literal"LESS
[133] TYPE IDENT
Lexem: "\n\tTokenGreaterEq",  Literal<nil>
[134] TYPE IDENT
Lexem: " TokenType",  Literal<nil>
[135] TYPE EQUAL
Lexem: " =",  Literal<nil>
[136] TYPE STRING
Lexem: " \"GREATER_EQUAL\"",  Literal"GREATER_EQUAL
[137] TYPE IDENT
Lexem: "\n\tTokenLessEq",  Literal<nil>
[138] TYPE IDENT
Lexem: "    TokenType",  Literal<nil>
[139] TYPE EQUAL
Lexem: " =",  Literal<nil>
[140] TYPE STRING
Lexem: " \"LESS_EQUAL\"",  Literal"LESS_EQUAL
[141] TYPE RPAREN
Lexem: "\n)",  Literal<nil>
[142] TYPE IDENT
Lexem: "\n\nvar",  Literal<nil>
[143] TYPE IDENT
Lexem: " keywords",  Literal<nil>
[144] TYPE EQUAL
Lexem: " =",  Literal<nil>
[145] TYPE IDENT
Lexem: " map",  Literal<nil>
[146] TYPE ERROR
Lexem: "[",  Literal<nil>
[147] TYPE IDENT
Lexem: "string",  Literal<nil>
[148] TYPE ERROR
Lexem: "]",  Literal<nil>
[149] TYPE IDENT
Lexem: "TokenType",  Literal<nil>
[150] TYPE ERROR
Lexem: "{",  Literal<nil>
[151] TYPE STRING
Lexem: "\n\t\"true\"",  Literal	"true
[152] TYPE ERROR
Lexem: ":",  Literal<nil>
[153] TYPE IDENT
Lexem: "   TokenTrue",  Literal<nil>
[154] TYPE ERROR
Lexem: ",",  Literal<nil>
[155] TYPE STRING
Lexem: "\n\t\"nil\"",  Literal	"nil
[156] TYPE ERROR
Lexem: ":",  Literal<nil>
[157] TYPE IDENT
Lexem: "    TokenNil",  Literal<nil>
[158] TYPE ERROR
Lexem: ",",  Literal<nil>
[159] TYPE STRING
Lexem: "\n\t\"false\"",  Literal	"false
[160] TYPE ERROR
Lexem: ":",  Literal<nil>
[161] TYPE IDENT
Lexem: "  TokenFalse",  Literal<nil>
[162] TYPE ERROR
Lexem: ",",  Literal<nil>
[163] TYPE STRING
Lexem: "\n\t\"if\"",  Literal	"if
[164] TYPE ERROR
Lexem: ":",  Literal<nil>
[165] TYPE IDENT
Lexem: "     TokenIf",  Literal<nil>
[166] TYPE ERROR
Lexem: ",",  Literal<nil>
[167] TYPE STRING
Lexem: "\n\t\"else\"",  Literal	"else
[168] TYPE ERROR
Lexem: ":",  Literal<nil>
[169] TYPE IDENT
Lexem: "   TokenElse",  Literal<nil>
[170] TYPE ERROR
Lexem: ",",  Literal<nil>
[171] TYPE STRING
Lexem: "\n\t\"for\"",  Literal	"for
[172] TYPE ERROR
Lexem: ":",  Literal<nil>
[173] TYPE IDENT
Lexem: "    TokenFor",  Literal<nil>
[174] TYPE ERROR
Lexem: ",",  Literal<nil>
[175] TYPE STRING
Lexem: "\n\t\"in\"",  Literal	"in
[176] TYPE ERROR
Lexem: ":",  Literal<nil>
[177] TYPE IDENT
Lexem: "     TokenIn",  Literal<nil>
[178] TYPE ERROR
Lexem: ",",  Literal<nil>
[179] TYPE STRING
Lexem: "\n\t\"var\"",  Literal	"var
[180] TYPE ERROR
Lexem: ":",  Literal<nil>
[181] TYPE IDENT
Lexem: "    TokenVar",  Literal<nil>
[182] TYPE ERROR
Lexem: ",",  Literal<nil>
[183] TYPE STRING
Lexem: "\n\t\"repo\"",  Literal	"repo
[184] TYPE ERROR
Lexem: ":",  Literal<nil>
[185] TYPE IDENT
Lexem: "   TokenRepo",  Literal<nil>
[186] TYPE ERROR
Lexem: ",",  Literal<nil>
[187] TYPE STRING
Lexem: "\n\t\"branch\"",  Literal	"branch
[188] TYPE ERROR
Lexem: ":",  Literal<nil>
[189] TYPE IDENT
Lexem: " TokenBranch",  Literal<nil>
[190] TYPE ERROR
Lexem: ",",  Literal<nil>
[191] TYPE ERROR
Lexem: "\n}",  Literal<nil>
[192] TYPE IDENT
Lexem: "\n\nfunc",  Literal<nil>
[193] TYPE IDENT
Lexem: " main",  Literal<nil>
[194] TYPE LPAREN
Lexem: "(",  Literal<nil>
[195] TYPE RPAREN
Lexem: ")",  Literal<nil>
[196] TYPE ERROR
Lexem: " {",  Literal<nil>
[197] TYPE IDENT
Lexem: "\n\n\tif",  Literal<nil>
[198] TYPE IDENT
Lexem: " len",  Literal<nil>
[199] TYPE LPAREN
Lexem: "(",  Literal<nil>
[200] TYPE IDENT
Lexem: "os",  Literal<nil>
[201] TYPE ERROR
Lexem: ".",  Literal<nil>
[202] TYPE IDENT
Lexem: "Args",  Literal<nil>
[203] TYPE RPAREN
Lexem: ")",  Literal<nil>
[204] TYPE ERROR
Lexem: " >",  Literal<nil>
[205] TYPE NUMBER
Lexem: " 2",  Literal0
[206] TYPE ERROR
Lexem: " {",  Literal<nil>
[207] TYPE IDENT
Lexem: "\n\t\tfmt",  Literal<nil>
[208] TYPE ERROR
Lexem: ".",  Literal<nil>
[209] TYPE IDENT
Lexem: "Fprintln",  Literal<nil>
[210] TYPE LPAREN
Lexem: "(",  Literal<nil>
[211] TYPE IDENT
Lexem: "os",  Literal<nil>
[212] TYPE ERROR
Lexem: ".",  Literal<nil>
[213] TYPE IDENT
Lexem: "Stderr",  Literal<nil>
[214] TYPE ERROR
Lexem: ",",  Literal<nil>
[215] TYPE STRING
Lexem: " \"Usage: niftel <file.nif>\"",  Literal"Usage: niftel <file.nif>
[216] TYPE RPAREN
Lexem: ")",  Literal<nil>
[217] TYPE IDENT
Lexem: "\n\t\tos",  Literal<nil>
[218] TYPE ERROR
Lexem: ".",  Literal<nil>
[219] TYPE IDENT
Lexem: "Exit",  Literal<nil>
[220] TYPE LPAREN
Lexem: "(",  Literal<nil>
[221] TYPE NUMBER
Lexem: "1",  Literal1
[222] TYPE RPAREN
Lexem: ")",  Literal<nil>
[223] TYPE ERROR
Lexem: "\n\t}",  Literal<nil>
[224] TYPE IDENT
Lexem: "\n\n\tfilename",  Literal<nil>
[225] TYPE ERROR
Lexem: " :",  Literal<nil>
[226] TYPE EQUAL
Lexem: "=",  Literal<nil>
[227] TYPE IDENT
Lexem: " os",  Literal<nil>
[228] TYPE ERROR
Lexem: ".",  Literal<nil>
[229] TYPE IDENT
Lexem: "Args",  Literal<nil>
[230] TYPE ERROR
Lexem: "[",  Literal<nil>
[231] TYPE NUMBER
Lexem: "1",  Literal1
[232] TYPE ERROR
Lexem: "]",  Literal<nil>
[233] TYPE IDENT
Lexem: "\n\n\tdata",  Literal<nil>
[234] TYPE ERROR
Lexem: ",",  Literal<nil>
[235] TYPE IDENT
Lexem: " err",  Literal<nil>
[236] TYPE ERROR
Lexem: " :",  Literal<nil>
[237] TYPE EQUAL
Lexem: "=",  Literal<nil>
[238] TYPE IDENT
Lexem: " os",  Literal<nil>
[239] TYPE ERROR
Lexem: ".",  Literal<nil>
[240] TYPE IDENT
Lexem: "ReadFile",  Literal<nil>
[241] TYPE LPAREN
Lexem: "(",  Literal<nil>
[242] TYPE IDENT
Lexem: "filename",  Literal<nil>
[243] TYPE RPAREN
Lexem: ")",  Literal<nil>
[244] TYPE IDENT
Lexem: "\n\tif",  Literal<nil>
[245] TYPE IDENT
Lexem: " err",  Literal<nil>
[246] TYPE ERROR
Lexem: " !",  Literal<nil>
[247] TYPE EQUAL
Lexem: "=",  Literal<nil>
[248] TYPE IDENT
Lexem: " nil",  Literal<nil>
[249] TYPE ERROR
Lexem: " {",  Literal<nil>
[250] TYPE IDENT
Lexem: "\n\t\tfmt",  Literal<nil>
[251] TYPE ERROR
Lexem: ".",  Literal<nil>
[252] TYPE IDENT
Lexem: "Fprintf",  Literal<nil>
[253] TYPE LPAREN
Lexem: "(",  Literal<nil>
[254] TYPE IDENT
Lexem: "os",  Literal<nil>
[255] TYPE ERROR
Lexem: ".",  Literal<nil>
[256] TYPE IDENT
Lexem: "Stderr",  Literal<nil>
[257] TYPE ERROR
Lexem: ",",  Literal<nil>
[258] TYPE STRING
Lexem: " \"Failed to read file %s: %v\\n\"",  Literal"Failed to read file %s: %v\n
[259] TYPE ERROR
Lexem: ",",  Literal<nil>
[260] TYPE IDENT
Lexem: " filename",  Literal<nil>
[261] TYPE ERROR
Lexem: ",",  Literal<nil>
[262] TYPE IDENT
Lexem: " err",  Literal<nil>
[263] TYPE RPAREN
Lexem: ")",  Literal<nil>
[264] TYPE IDENT
Lexem: "\n\t\tos",  Literal<nil>
[265] TYPE ERROR
Lexem: ".",  Literal<nil>
[266] TYPE IDENT
Lexem: "Exit",  Literal<nil>
[267] TYPE LPAREN
Lexem: "(",  Literal<nil>
[268] TYPE NUMBER
Lexem: "1",  Literal1
[269] TYPE RPAREN
Lexem: ")",  Literal<nil>
[270] TYPE ERROR
Lexem: "\n\t}",  Literal<nil>
[271] TYPE IDENT
Lexem: "\n\tlog",  Literal<nil>
[272] TYPE ERROR
Lexem: ".",  Literal<nil>
[273] TYPE IDENT
Lexem: "Print",  Literal<nil>
[274] TYPE LPAREN
Lexem: "(",  Literal<nil>
[275] TYPE STRING
Lexem: "\"Reading source code...\"",  LiteralReading source code...
[276] TYPE RPAREN
Lexem: ")",  Literal<nil>
[277] TYPE IDENT
Lexem: "\n\n\tsource",  Literal<nil>
[278] TYPE ERROR
Lexem: " :",  Literal<nil>
[279] TYPE EQUAL
Lexem: "=",  Literal<nil>
[280] TYPE IDENT
Lexem: " string",  Literal<nil>
[281] TYPE LPAREN
Lexem: "(",  Literal<nil>
[282] TYPE IDENT
Lexem: "data",  Literal<nil>
[283] TYPE RPAREN
Lexem: ")",  Literal<nil>
[284] TYPE IDENT
Lexem: "\n\n\tlexer",  Literal<nil>
[285] TYPE ERROR
Lexem: " :",  Literal<nil>
[286] TYPE EQUAL
Lexem: "=",  Literal<nil>
[287] TYPE IDENT
Lexem: " NewScanner",  Literal<nil>
[288] TYPE LPAREN
Lexem: "(",  Literal<nil>
[289] TYPE IDENT
Lexem: "string",  Literal<nil>
[290] TYPE LPAREN
Lexem: "(",  Literal<nil>
[291] TYPE IDENT
Lexem: "source",  Literal<nil>
[292] TYPE RPAREN
Lexem: ")",  Literal<nil>
[293] TYPE RPAREN
Lexem: ")",  Literal<nil>
[294] TYPE IDENT
Lexem: "\n\ttokens",  Literal<nil>
[295] TYPE ERROR
Lexem: " :",  Literal<nil>
[296] TYPE EQUAL
Lexem: "=",  Literal<nil>
[297] TYPE IDENT
Lexem: " lexer",  Literal<nil>
[298] TYPE ERROR
Lexem: ".",  Literal<nil>
[299] TYPE IDENT
Lexem: "ScanTokens",  Literal<nil>
[300] TYPE LPAREN
Lexem: "(",  Literal<nil>
[301] TYPE RPAREN
Lexem: ")",  Literal<nil>
[302] TYPE IDENT
Lexem: "\n\n\tfor",  Literal<nil>
[303] TYPE IDENT
Lexem: " i",  Literal<nil>
[304] TYPE ERROR
Lexem: ",",  Literal<nil>
[305] TYPE IDENT
Lexem: " t",  Literal<nil>
[306] TYPE ERROR
Lexem: " :",  Literal<nil>
[307] TYPE EQUAL
Lexem: "=",  Literal<nil>
[308] TYPE IDENT
Lexem: " range",  Literal<nil>
[309] TYPE IDENT
Lexem: " tokens",  Literal<nil>
[310] TYPE ERROR
Lexem: " {",  Literal<nil>
[311] TYPE IDENT
Lexem: "\n\t\tfmt",  Literal<nil>
[312] TYPE ERROR
Lexem: ".",  Literal<nil>
[313] TYPE IDENT
Lexem: "Printf",  Literal<nil>
[314] TYPE LPAREN
Lexem: "(",  Literal<nil>
[315] TYPE STRING
Lexem: "\"[%d] TYPE %s\\nLexem: %q,  Literal%v\\n\"",  Literal[%d] TYPE %s\nLexem: %q,  Literal%v\n
[316] TYPE ERROR
Lexem: ",",  Literal<nil>
[317] TYPE IDENT
Lexem: " i",  Literal<nil>
[318] TYPE ERROR
Lexem: ",",  Literal<nil>
[319] TYPE IDENT
Lexem: " t",  Literal<nil>
[320] TYPE ERROR
Lexem: ".",  Literal<nil>
[321] TYPE IDENT
Lexem: "Type",  Literal<nil>
[322] TYPE ERROR
Lexem: ",",  Literal<nil>
[323] TYPE IDENT
Lexem: " t",  Literal<nil>
[324] TYPE ERROR
Lexem: ".",  Literal<nil>
[325] TYPE IDENT
Lexem: "Lexeme",  Literal<nil>
[326] TYPE ERROR
Lexem: ",",  Literal<nil>
[327] TYPE IDENT
Lexem: " t",  Literal<nil>
[328] TYPE ERROR
Lexem: ".",  Literal<nil>
[329] TYPE IDENT
Lexem: "Literal",  Literal<nil>
[330] TYPE RPAREN
Lexem: ")",  Literal<nil>
[331] TYPE ERROR
Lexem: "\n\t}",  Literal<nil>
[332] TYPE IDENT
Lexem: "\n\n\tparser",  Literal<nil>
[333] TYPE ERROR
Lexem: " :",  Literal<nil>
[334] TYPE EQUAL
Lexem: "=",  Literal<nil>
[335] TYPE IDENT
Lexem: " NewParser",  Literal<nil>
[336] TYPE LPAREN
Lexem: "(",  Literal<nil>
[337] TYPE IDENT
Lexem: "tokens",  Literal<nil>
[338] TYPE RPAREN
Lexem: ")",  Literal<nil>
[339] TYPE IDENT
Lexem: "\n\tstatements",  Literal<nil>
[340] TYPE ERROR
Lexem: ",",  Literal<nil>
[341] TYPE IDENT
Lexem: " err",  Literal<nil>
[342] TYPE ERROR
Lexem: " :",  Literal<nil>
[343] TYPE EQUAL
Lexem: "=",  Literal<nil>
[344] TYPE IDENT
Lexem: " parser",  Literal<nil>
[345] TYPE ERROR
Lexem: ".",  Literal<nil>
[346] TYPE IDENT
Lexem: "Parse",  Literal<nil>
[347] TYPE LPAREN
Lexem: "(",  Literal<nil>
[348] TYPE RPAREN
Lexem: ")",  Literal<nil>
[349] TYPE IDENT
Lexem: "\n\n\tif",  Literal<nil>
[350] TYPE IDENT
Lexem: " err",  Literal<nil>
[351] TYPE ERROR
Lexem: " !",  Literal<nil>
[352] TYPE EQUAL
Lexem: "=",  Literal<nil>
[353] TYPE IDENT
Lexem: " nil",  Literal<nil>
[354] TYPE ERROR
Lexem: " {",  Literal<nil>
[355] TYPE IDENT
Lexem: "\n\t\tfmt",  Literal<nil>
[356] TYPE ERROR
Lexem: ".",  Literal<nil>
[357] TYPE IDENT
Lexem: "Fprintf",  Literal<nil>
[358] TYPE LPAREN
Lexem: "(",  Literal<nil>
[359] TYPE IDENT
Lexem: "os",  Literal<nil>
[360] TYPE ERROR
Lexem: ".",  Literal<nil>
[361] TYPE IDENT
Lexem: "Stderr",  Literal<nil>
[362] TYPE ERROR
Lexem: ",",  Literal<nil>
[363] TYPE STRING
Lexem: " \"Parsing error: %v\\n\"",  Literal"Parsing error: %v\n
[364] TYPE ERROR
Lexem: ",",  Literal<nil>
[365] TYPE IDENT
Lexem: " err",  Literal<nil>
[366] TYPE RPAREN
Lexem: ")",  Literal<nil>
[367] TYPE IDENT
Lexem: "\n\t\tos",  Literal<nil>
[368] TYPE ERROR
Lexem: ".",  Literal<nil>
[369] TYPE IDENT
Lexem: "Exit",  Literal<nil>
[370] TYPE LPAREN
Lexem: "(",  Literal<nil>
[371] TYPE NUMBER
Lexem: "1",  Literal1
[372] TYPE RPAREN
Lexem: ")",  Literal<nil>
[373] TYPE ERROR
Lexem: "\n\t}",  Literal<nil>
[374] TYPE IDENT
Lexem: "\n\tfmt",  Literal<nil>
[375] TYPE ERROR
Lexem: ".",  Literal<nil>
[376] TYPE IDENT
Lexem: "Printf",  Literal<nil>
[377] TYPE LPAREN
Lexem: "(",  Literal<nil>
[378] TYPE STRING
Lexem: "\"Parsed %d statements:\\n\"",  LiteralParsed %d statements:\n
[379] TYPE ERROR
Lexem: ",",  Literal<nil>
[380] TYPE IDENT
Lexem: " len",  Literal<nil>
[381] TYPE LPAREN
Lexem: "(",  Literal<nil>
[382] TYPE IDENT
Lexem: "statements",  Literal<nil>
[383] TYPE RPAREN
Lexem: ")",  Literal<nil>
[384] TYPE RPAREN
Lexem: ")",  Literal<nil>
[385] TYPE IDENT
Lexem: "\n\tfor",  Literal<nil>
[386] TYPE ERROR
Lexem: " _",  Literal<nil>
[387] TYPE ERROR
Lexem: ",",  Literal<nil>
[388] TYPE IDENT
Lexem: " stmt",  Literal<nil>
[389] TYPE ERROR
Lexem: " :",  Literal<nil>
[390] TYPE EQUAL
Lexem: "=",  Literal<nil>
[391] TYPE IDENT
Lexem: " range",  Literal<nil>
[392] TYPE IDENT
Lexem: " statements",  Literal<nil>
[393] TYPE ERROR
Lexem: " {",  Literal<nil>
[394] TYPE IDENT
Lexem: "\n\t\tlog",  Literal<nil>
[395] TYPE ERROR
Lexem: ".",  Literal<nil>
[396] TYPE IDENT
Lexem: "Println",  Literal<nil>
[397] TYPE LPAREN
Lexem: "(",  Literal<nil>
[398] TYPE STRING
Lexem: "\"parsing file....\"",  Literalparsing file....
[399] TYPE RPAREN
Lexem: ")",  Literal<nil>
[400] TYPE IDENT
Lexem: "\n\t\tfmt",  Literal<nil>
[401] TYPE ERROR
Lexem: ".",  Literal<nil>
[402] TYPE IDENT
Lexem: "Printf",  Literal<nil>
[403] TYPE LPAREN
Lexem: "(",  Literal<nil>
[404] TYPE STRING
Lexem: "\"TYPE %T\\nDATA: %#v\\n\"",  LiteralTYPE %T\nDATA: %#v\n
[405] TYPE ERROR
Lexem: ",",  Literal<nil>
[406] TYPE IDENT
Lexem: " stmt",  Literal<nil>
[407] TYPE ERROR
Lexem: ",",  Literal<nil>
[408] TYPE IDENT
Lexem: " stmt",  Literal<nil>
[409] TYPE RPAREN
Lexem: ")",  Literal<nil>
[410] TYPE ERROR
Lexem: "\n\t}",  Literal<nil>
[411] TYPE ERROR
Lexem: "\n\n}",  Literal<nil>
[412] TYPE EOF
Lexem: "",  Literal<nil>
[413] TYPE EOF
Lexem: "",  Literal<nil>
