ScanToken start 0: current 0: char 'v'
Unhandled char: 'v'
[identifier] start=0 current=1
[identifier] start=0 current=2
[identifier] start=0 current=3
ScanToken start 3: current 3: char ' '
ScanToken start 3: current 4: char 'h'
Unhandled char: 'h'
[identifier] start=3 current=5
[identifier] start=3 current=6
[identifier] start=3 current=7
[identifier] start=3 current=8
[identifier] start=3 current=9
ScanToken start 9: current 9: char ' '
ScanToken start 9: current 10: char '='
ScanToken start 11: current 11: char ' '
ScanToken start 11: current 12: char '"'
[string] returning: main.Token{Type:"STRING", Lexeme:" \"foo\"", Literal:"\"foo", Line:1}
ScanToken start 17: current 17: char '\n'
ScanToken start 17: current 18: char '\n'
ScanToken start 17: current 19: char '\x00'
[0] TYPE KEYWORD
Lexem: "var",  Literal<nil>
[1] TYPE IDENT
Lexem: " hello",  Literal<nil>
[2] TYPE EQUAL
Lexem: " =",  Literal<nil>
[3] TYPE STRING
Lexem: " \"foo\"",  Literal"foo
[4] TYPE EOF
Lexem: "",  Literal<nil>
[5] TYPE EOF
Lexem: "",  Literal<nil>
Parsed 1 statements:
TYPE main.VarStmt
DATA: main.VarStmt{Name:main.Token{Type:"IDENT", Lexeme:" hello", Literal:interface {}(nil), Line:1}, Value:main.LiteralExpr{Value:" \"foo"}}
